<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Journeyman&#x27;s Guides</title>
	<subtitle>Some technical explorations and ramblings</subtitle>
	<link href="https://jagill.github.io/zola-test/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://jagill.github.io/zola-test"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-12-12T00:00:00+00:00</updated>
	<id>https://jagill.github.io/zola-test/atom.xml</id>
	<entry xml:lang="en">
		<title>A Primer on Computer Memory</title>
		<published>2020-12-12T00:00:00+00:00</published>
		<updated>2020-12-12T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/computer-memory/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/computer-memory/</id>
		<content type="html">&lt;p&gt;While I&#x27;ve long known a computer runs by manipulating bits, I didn&#x27;t have a
good mental model of where those bits are stored and how they are accessed.
I&#x27;ve had to build that understanding over the years, which has helped greatly
as I&#x27;ve optimized training pipelines for neural nets, or developed data
structures for high-performance computing. Talking to colleagues in the
industry, I&#x27;ve found many of them are also uncertain about some foundational
details. This article will build a mental model of computer memory, so that
you can reason about the computer&#x27;s memory model, and why certain things are
fast and others slow.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;First I&#x27;ll talk about chunking &lt;em&gt;bits&lt;&#x2F;em&gt; into &lt;em&gt;bytes&lt;&#x2F;em&gt; and &lt;em&gt;words&lt;&#x2F;em&gt;. Second, I&#x27;ll
talk about &lt;em&gt;registers&lt;&#x2F;em&gt; and how all operations are ultimately done on those.
Next I&#x27;ll talk about &lt;em&gt;RAM&lt;&#x2F;em&gt;, the special registers that deal with it, and what
&lt;em&gt;allocation&lt;&#x2F;em&gt; and &lt;em&gt;deallocation&lt;&#x2F;em&gt; mean. This will allow us to describe the
&lt;em&gt;stack&lt;&#x2F;em&gt;, and how data is transferred to and from function calls. The
limitations of the stack will introduce the &lt;em&gt;heap&lt;&#x2F;em&gt;, and some more strategies
for &lt;em&gt;allocation&lt;&#x2F;em&gt; and &lt;em&gt;deallocation&lt;&#x2F;em&gt;. I&#x27;ll briefly discuss &lt;em&gt;disks&lt;&#x2F;em&gt; and
secondary storage. &lt;em&gt;Virtual Memory&lt;&#x2F;em&gt; will be a powerful construct that allows
us to blur the boundaries between disks and RAM, and it sets up the
difference between &lt;em&gt;kernel space&lt;&#x2F;em&gt; and &lt;em&gt;user space&lt;&#x2F;em&gt; and how kernels manage the
memory of multiple processes. These processes might use &lt;em&gt;inter-process
communication&lt;&#x2F;em&gt;, which can be expensive. &lt;em&gt;Threads&lt;&#x2F;em&gt; are an alternative that are
cheaper but have their own tradeoffs. Lastly, I&#x27;ll talk about &lt;em&gt;CPU caches&lt;&#x2F;em&gt;,
which are critical to how modern CPUs are so fast.&lt;&#x2F;p&gt;
&lt;p&gt;These pieces will build up the &lt;em&gt;memory hierarchy&lt;&#x2F;em&gt;, which are layers of
progressively larger and slower types of memory.  This hierarchy consists --
from fastest to largest -- of registers, CPU caches, RAM, and disks.  Efficient
computation keeps frequently and imminently needed data in the lower levels of
the hierarchy, using the higher levels as storage.&lt;&#x2F;p&gt;
&lt;p&gt;Readers who know this material will find many places where I ignore lots of
details, some of which may be considered important. I&#x27;ll intentionally
simplify the mental model of memory to give people an intuition as to what&#x27;s
happening, but this necessitates being a bit fast and loose. I encourage
interested readers to dig deeper into the details from other sources.  I&#x27;ve
listed some I particularly like at the end.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bits-bytes-and-words&quot;&gt;Bits, Bytes, and Words&lt;a class=&quot;zola-anchor&quot; href=&quot;#bits-bytes-and-words&quot; aria-label=&quot;Anchor link for: bits-bytes-and-words&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Bits are things that can be in two positions, which we traditionally call 0
or 1. In modern computers, they may be tiny capacitors, tiny magnetic
regions, or more. The details of a bit won&#x27;t concern us, but you should know
that there are trade-offs involved in the choice of bit-material: speed,
cost, volatility, and more. If you wonder why we don&#x27;t just build all of our
memory with the super-fast stuff, know that there is a reason (and it&#x27;s not
just cost!).&lt;&#x2F;p&gt;
&lt;p&gt;The smallest number of bits that modern computers can reasonably access is 8,
called a byte. To check an individual bit, the computer would need to load a
byte then check the bit (by something like an AND operation).&lt;&#x2F;p&gt;
&lt;p&gt;Computers based on single bytes fell out of favor some time ago. The
architecture started assuming multi-byte chunks as a primitive memory size:
first 2 bytes, then 4 bytes, then 8 bytes on most modern architectures. This
natural chunk size is called a &lt;em&gt;word&lt;&#x2F;em&gt;. Let&#x27;s simplify our discussion (at a
small cost in accuracy) by assuming that all memory movements, computations,
etc are done in units of a word.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#cache-lines&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;cache-lines&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Actually, movement between RAM and the CPU is done in units
of cache-lines, and from disk to RAM in units of pages.  We&#x27;ll discuss these,
but it won&#x27;t affect our mental model.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;alus-registers-and-cpus&quot;&gt;ALUs, Registers, and CPUs&lt;a class=&quot;zola-anchor&quot; href=&quot;#alus-registers-and-cpus&quot; aria-label=&quot;Anchor link for: alus-registers-and-cpus&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The fundamental computation unit of a computer is called the &lt;em&gt;Arithmetic
Logical Unit&lt;&#x2F;em&gt;, or &lt;em&gt;ALU&lt;&#x2F;em&gt;. Its job is to combine either one or two input words
to produce an output word. For example, it might negate an integer, add two
integers to produce their sum, or XOR two words.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#other-alu-ops&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. These words
are stored in &lt;em&gt;registers&lt;&#x2F;em&gt;, which are very fast word-sized pieces of memory
that are very close to the ALU. Often, the ALU will combine two registers and
store the output in one of those two registers, although this is not always
the case.&lt;&#x2F;p&gt;
&lt;p&gt;Which two registers are used, and what should be done with them, is
controlled by the &lt;em&gt;Central Processing Unit&lt;&#x2F;em&gt;, or &lt;em&gt;CPU&lt;&#x2F;em&gt;. While most registers
are general purpose (with descriptive names like A, B, C, D...), some have
special purposes. One of those is the &lt;em&gt;Instruction Register&lt;&#x2F;em&gt; (&lt;em&gt;IR&lt;&#x2F;em&gt;) which
holds a value which tells the CPU which operation it should perform and on
which registers. Another is the &lt;em&gt;Program Counter&lt;&#x2F;em&gt; (&lt;em&gt;PC&lt;&#x2F;em&gt;), which holds a word
that is the memory address in &lt;em&gt;RAM&lt;&#x2F;em&gt; (see below) of the next instruction. Very
roughly, the CPU will load the word at the address of the Program Counter
into the Instruction Register, increment the Program Counter, then perform
that operation in the Instruction Register on the specified registers. This
sequence is called a &lt;em&gt;cycle&lt;&#x2F;em&gt;, and it&#x27;s the fundamental unit of time for a
computer.&lt;&#x2F;p&gt;
&lt;p&gt;To keep things interesting, some the operations can change the value of the
Program Counter to jump around the program. This enables loops, if-then-else,
and other control flow statements.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;other-alu-ops&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;There are other bits that are inputs and outputs to the
ALU, like carry bits for addition, or various outcomes when you compare two
words. They aren&#x27;t critical to understanding the memory model.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;ram-and-the-memory-registers&quot;&gt;RAM and the memory registers&lt;a class=&quot;zola-anchor&quot; href=&quot;#ram-and-the-memory-registers&quot; aria-label=&quot;Anchor link for: ram-and-the-memory-registers&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The amount of memory that can be held in the registers is too small to
contain the necessary information for any non-trivial program. For that, we
need &lt;em&gt;Random Access Memory&lt;&#x2F;em&gt;, which is a large pool of memory that is
relatively slow (compared to registers) and far from the CPU. The program (a
sequence of instructions) is stored in RAM. I mentioned above how the Program
Counter and Instruction Register are used to read and execute instructions
from RAM, and something similar is done for data.&lt;&#x2F;p&gt;
&lt;p&gt;To get values to and from RAM, we use two special registers call the &lt;em&gt;Memory
Address Register&lt;&#x2F;em&gt; (&lt;em&gt;MAR&lt;&#x2F;em&gt;) and the &lt;em&gt;Memory Data Register&lt;&#x2F;em&gt; (&lt;em&gt;MDR&lt;&#x2F;em&gt;). The Memory
Address Register contains the address in RAM that we&#x27;ll be reading or
writing, and the Memory Data Register will contain the value that we&#x27;ll
write, or it will be the destination of the value that we&#x27;ll read. Then the
CPU can move the values to&#x2F;from the Memory Data Register from&#x2F;to the general
purpose registers, allowing the ALU to effectively operate on data in RAM.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to the special part of RAM that contains the program
instructions, the constant values of the program are stored in a special
&lt;em&gt;static&lt;&#x2F;em&gt; block of memory that exists for the length of the process. When you
write the expression &lt;code&gt;global int x = 5;&lt;&#x2F;code&gt; the value &lt;code&gt;5&lt;&#x2F;code&gt; is stored in the
static block, and accessed by its memory location.&lt;&#x2F;p&gt;
&lt;p&gt;While a process could use RAM as an unstructured space of memory, it would
need to keep track of which locations are in use and which could be used for
new storage. This problem is called &lt;em&gt;allocation&lt;&#x2F;em&gt;, and it is hard. It would
also need to keep track of when and where it can free memory that it was
using, but no longer needs. This is called &lt;em&gt;deallocation&lt;&#x2F;em&gt;, and it is also
hard. It gets much harder when you have multiple processes running
simultaneously, which modern computers generally do!&lt;&#x2F;p&gt;
&lt;p&gt;To reduce this problem to a manageable complexity, first we&#x27;ll discuss how a
single process structures its memory, then how an operating system keeps
processes from stepping on each other&#x27;s data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-stack&quot;&gt;The Stack&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-stack&quot; aria-label=&quot;Anchor link for: the-stack&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A way of managing allocations and deallocations is a &lt;em&gt;call stack&lt;&#x2F;em&gt; (or just
&lt;em&gt;stack&lt;&#x2F;em&gt;). This is a more structured method for memory management that is the
basis of all modern computing. As its name implies, the stack is a region of
memory that grows by pushing values on to the end, and popping values off of
that same end. In most computer architectures, the stack starts at an address
and grows &lt;em&gt;down&lt;&#x2F;em&gt;, to lower memory addresses&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#stack-direction&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;em&gt;subroutine&lt;&#x2F;em&gt; is a block of instructions (like a function) that is separated
from the main routine, in execution and in data. The main routine can call
subroutines, but subroutines can also call subroutines. At any given point,
the process is in a subroutine at some level of nesting, with the subroutine
that called it above it, and so on until the main routine.&lt;&#x2F;p&gt;
&lt;p&gt;Subroutines allow us to organize the stack into blocks called &lt;em&gt;stack frames&lt;&#x2F;em&gt;.
When a subroutine starts, it adds the memory location of the calling
instruction to the stack, and any arguments to the function
call&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#stack-header&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. This is considered the start of the stack frame, and a
special register called the &lt;em&gt;frame pointer&lt;&#x2F;em&gt; will store the memory address of
the start of the frame. Another special register called the &lt;em&gt;stack pointer&lt;&#x2F;em&gt;
will also start with the address just after the frame pointer, which points
to the first free memory of the stack frame. As a variable local to the
function is allocated, the stack pointer is decremented by the size of the
variable, and the value of the variable is written at the position of the
stack pointer.&lt;&#x2F;p&gt;
&lt;p&gt;When this variable needs to be referenced, it can be referenced by the stack
pointer minus some offset. When the function returns, the stack pointer can be
reset to the frame pointer, deallocating the entire frame in a single
operation. The calling instruction can be easily read, and control returned
to it. The return value, if any, of the subroutine can be stored in a
register to be used by the calling process.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the stack generally has a maximum size. If a process tries to
allocate too much memory on the stack (perhaps due to runaway recursion), this
limit might be exceeded, and the process will halt with a &lt;em&gt;stack overflow&lt;&#x2F;em&gt;
error.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;stack-direction&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;In some microcontrollers (like the 8051), the stack grows
up.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;stack-header&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;Other things can go in the stack frame. For example, Java puts
stack trace information, so that as an exception bubbles up, it can contain
useful information for debugging. This comes at a cost in the memory size of
a stack frame.  Also, the compiler generally pre-allocates space for local 
variables when it creates the stack frame.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;the-heap&quot;&gt;The Heap&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-heap&quot; aria-label=&quot;Anchor link for: the-heap&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Certain structures are not well suited for the stack. Consider an array that
can grow, for example as a base of a Vector or List. When it is created, a
fixed chunk of memory is reserved for it (to hold, say, 512 elements). If it
needs to grow to more than its initial capacity will allow, it will need more
memory. On the stack, it&#x27;s quite possible that something else will have been
allocated right after it, which means it cannot grow without displacing
something. Structures that have unknown or changing size requirements
necessitate another form of memory management.&lt;&#x2F;p&gt;
&lt;p&gt;Enter the &lt;em&gt;heap&lt;&#x2F;em&gt;. This is a large region of memory (generally the vast
majority of the memory available to the process) which can be reserved
piecemeal anywhere that it is not in use. Access to the heap is controlled by
the &lt;em&gt;allocator&lt;&#x2F;em&gt;: the process requests a chunk of memory of a given size, the
allocator is responsible for returning an address of memory that is the start
of a chunk of the requested size that is not in use. This means the allocator
has to know which regions of the heap are in use, and quickly find a region not
in use of the requested size. This is much slower and less efficient than
stack allocation, which just requires incrementing the stack pointer!&lt;&#x2F;p&gt;
&lt;p&gt;In order for a process to not run out of heap memory, it will need to free the
heap memory it is no longer using: this is called &lt;em&gt;deallocation&lt;&#x2F;em&gt;. Knowing what
variables are no longer in use is hard! So is freeing them efficiently, and in
a way that doesn&#x27;t leave the heap too fragmented to allocate the memory for any
large variables.&lt;&#x2F;p&gt;
&lt;p&gt;To allocate and deallocate efficiently, the implementations of each are very
intertwined. One of the most foundational and impactful choices when creating
a programming language is the choice of heap memory management. Some, like C
and older editions of C++, require the programmer to manually mark a variable
as no longer in use. Bugs can cause cryptic crashes, memory corruption, and
security vulnerabilities. Some, like Java or Python, use a garbage collector,
freeing the programmer from that responsibility, but use up system resource
and cause occasional garbage-collection hangs. Other languages rely heavily
on the compiler: Objective-C, Swift, and modern C++ insert reference counts,
so that the compiler knows when a variable is no longer being used, and can
insert a deallocation call. Rust variables have an enforced concept of
ownership, and when a variable has no active owner, the compiler can add a
deallocation call here as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rom&quot;&gt;ROM&lt;a class=&quot;zola-anchor&quot; href=&quot;#rom&quot; aria-label=&quot;Anchor link for: rom&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To start up a computer, a bootstrap program needs to run. After some initial
actions, this bootstrap program loads the main program (generally the
operating system) into RAM. Since RAM is reset when the computer is turned
off, where does this bootstrap program live? There is a special kind of
non-volatile memory called &lt;em&gt;Read Only Memory&lt;&#x2F;em&gt; (&lt;em&gt;ROM&lt;&#x2F;em&gt;) which persists its data
even without power.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;disks-and-virtual-memory&quot;&gt;Disks and Virtual Memory&lt;a class=&quot;zola-anchor&quot; href=&quot;#disks-and-virtual-memory&quot; aria-label=&quot;Anchor link for: disks-and-virtual-memory&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Using RAM to contain the program and the data has a couple limitations:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;When a computer is off, its RAM loses all its data,&lt;&#x2F;li&gt;
&lt;li&gt;The program must be small enough to fit into RAM, and&lt;&#x2F;li&gt;
&lt;li&gt;The data must be small enough to fit into the rest of the RAM.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Most of the time programs and persistent data live on disks, which we call
&lt;em&gt;secondary storage&lt;&#x2F;em&gt; (RAM is also called &lt;em&gt;primary storage&lt;&#x2F;em&gt;). Much as RAM is
much slower but much larger than the registers, disk drives are typically
much slower but much larger than RAM. The kernel (see below) and drivers
abstract the details of how the data is stored and accessed from the process.
For our purposes, we can view secondary storage as an effectively infinite,
yet quite slow, form of memory.&lt;&#x2F;p&gt;
&lt;p&gt;To allow the process to access secondary storage, the kernel provides an
abstraction called &lt;em&gt;virtual memory&lt;&#x2F;em&gt;. Virtual memory is a level of indirection
between the memory the process sees, and the physical RAM and secondary
storage. We&#x27;ll call RAM &lt;em&gt;physical memory&lt;&#x2F;em&gt;, and divide it up into chunks of
size 4 kB called &lt;em&gt;frames&lt;&#x2F;em&gt;. Each process will be allocated a &lt;em&gt;logical memory&lt;&#x2F;em&gt;
space, which is divided into &lt;em&gt;pages&lt;&#x2F;em&gt; (the same size as frames). The process
refers to memory using a logical address (a page number and an offset within
the page), and the &lt;em&gt;Memory Management Unit&lt;&#x2F;em&gt; (&lt;em&gt;MMU&lt;&#x2F;em&gt;) of the CPU translates
this into a physical address, and the process transparently accesses the
physical memory. The MMU does this by maintaining a &lt;em&gt;page table&lt;&#x2F;em&gt;, which
records if a page has a frame allocated, and if so, which one. This has two
major benefits.&lt;&#x2F;p&gt;
&lt;p&gt;The first benefit is that the logical memory space can be larger than
available (or allotted) physical memory, by using secondary storage. A
portion of the secondary storage is allocated for virtual memory, large
enough to hold the memory allocated. When a page is requested and it maps to
a frame, the frame is accessed as normal. If it doesn&#x27;t map to a frame, but
there is an unassigned frame, then the unassigned frame is assigned to the
page, and again the process uses the memory as normal. But if there is no
frame available, the kernel (see below) choose a frame that&#x27;s &amp;quot;quiet&amp;quot; and
&lt;em&gt;swaps&lt;&#x2F;em&gt; it out by saving it to disk, reassigning the frame from its original
page to the new page. When this happens, it&#x27;s called a &lt;em&gt;page fault&lt;&#x2F;em&gt;, and it&#x27;s
much more expensive than accessing memory normally. If only a small number of
pages are accessed at a given time, there will be few page faults and
execution will be almost as fast as if everything was in RAM. If operating
systems can predict which pages will be used, they can pre-fetch them, so
that the process doesn&#x27;t notice. However, if pages must be swapped
frequently, then the CPU will be idle a significant amount of time, waiting
for disk reads&#x2F;writes. This is called &lt;em&gt;thrashing&lt;&#x2F;em&gt;, and leads to very poor
performance.&lt;&#x2F;p&gt;
&lt;p&gt;The second benefit is that each running process can have its own logical
memory space, and the MMU will ensure that each process can only access the
allowed part of the physical memory. When one process is less active, it can
be partially or entirely swapped out, freeing more memory for processes that
are running hotter. This way, each process just sees a contiguous dedicated
block of memory, and can allocate and deallocate as if it were the only
process running.&lt;&#x2F;p&gt;
&lt;p&gt;An optimization is possible for processes that share the same program: each
process&#x27;s pages that map to the program&#x27;s instructions can point to the same
frames in RAM, so multiple copies of the same program don&#x27;t need to be
loaded. Similarly, if multiple processes depend on the same library, that
library can be loaded just once in memory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kernel-space-and-user-space&quot;&gt;Kernel Space and User Space&lt;a class=&quot;zola-anchor&quot; href=&quot;#kernel-space-and-user-space&quot; aria-label=&quot;Anchor link for: kernel-space-and-user-space&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A modern computer tends to run hundreds of processes at a given time. The
&lt;em&gt;kernel&lt;&#x2F;em&gt; controls these processes: starting, stopping, giving access to CPUs
and RAM. The kernel reserves a big portion of RAM for itself, called &lt;em&gt;kernel
space&lt;&#x2F;em&gt;. No other process can touch this RAM. When a process is started, it is
allocated a virtual memory space. This virtual memory is all the process is
allowed to access, and no other process (except the kernel) is allowed to
access it. The kernel is responsible for mapping the virtual memory to RAM,
and swapping pages to disk (discussed last section). This means that
processes can access their memory as if it was a contiguous block dedicated
to them, and the kernel will prevent other processes from writing to and
reading from it.&lt;&#x2F;p&gt;
&lt;p&gt;Kernels ultimately control access to resources. They allocate a certain
amount of RAM to the process, schedule execution on the CPU, and control
access to any IO, like a disk or the network. A process can request access to
this via a &lt;em&gt;system call&lt;&#x2F;em&gt;; process execution stops as the kernel performs the
requested action, then returns control to the process with the desired
result. This blocking makes a system call expensive.&lt;&#x2F;p&gt;
&lt;p&gt;Kernels can go even further by stopping processes and restarting them. When
it stops a process it can swap out the entirety of a stopped process&#x27;s
memory, freeing that RAM for other processes. If it does this, it must also
save the contents of the registers to be restored.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inter-process-communication&quot;&gt;Inter-process communication&lt;a class=&quot;zola-anchor&quot; href=&quot;#inter-process-communication&quot; aria-label=&quot;Anchor link for: inter-process-communication&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Since in general processes don&#x27;t share memory, &lt;em&gt;inter-process communication&lt;&#x2F;em&gt;
involves the sending process to serialize objects, and write then to a pipe
or other communication channel. The receiver reads from this channel, and
writes a copy of the data to its own memory. This is expensive for large
amounts of data. Since the data is copied, one process will not change data
underneath another process, and the copies may diverge as the two processes
manipulate them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Shared memory&lt;&#x2F;em&gt; can be used instead of copying the data. Shared memory is a
region of physical memory that multiple processes can access: pages of their
logical memory map to it. This allows very quick inter-process communication,
since only the pointer needs to be transferred. However, shared memory
suffers from the same issues as any other concurrent data access: multiple
processes can simultaneously attempt to access the data. In the best case,
this leads to slowness over lock contention, but it can also lead to data
corruption and undefined behavior.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;threads&quot;&gt;Threads&lt;a class=&quot;zola-anchor&quot; href=&quot;#threads&quot; aria-label=&quot;Anchor link for: threads&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Threads&lt;&#x2F;em&gt; are often described as &amp;quot;lightweight processes&amp;quot;. The kernel
allocates resources to the process, but will schedule execution to the
thread. A process&#x27;s main execution is the &lt;em&gt;main thread&lt;&#x2F;em&gt;; a basic process has
only this one thread. However, a process can request additional &lt;em&gt;kernel
threads&lt;&#x2F;em&gt; from the kernel. Each thread will have shared access to the program
data, the heap, and any file&#x2F;etc resources, but will have its own stack. This
makes starting a new thread cheaper than a new process, because no additional
resources (RAM, etc) have to be procured. It also makes &lt;em&gt;inter-thread
communication&lt;&#x2F;em&gt; very cheap, because (like in the case of shared memory), the
threads have to only pass pointers. As with any shared memory, this is also
dangerous: controlling shared access to data is extremely challenging. Some
solutions synchronize access to data, so that only one thread has access to
it at a time. This will slow down execution, as one thread will have to wait
for another, but it also can lead to deadlock, grinding the threads to a
halt.&lt;&#x2F;p&gt;
&lt;p&gt;The kernel will split CPU time for threads. In the best case, when there are
as many CPUs as threads, each thread can have a dedicated CPU. More often,
the kernel will slice time on CPUs, scheduling and suspending threads
(including threads from different processes). When a thread is suspended, the
associated registers (including stack pointers, program registers, etc) will
have to be saved, to be restored when the thread is re-scheduled. A common case
is when a thread makes a blocking system call: it must wait, so another thread
will use its compute resources.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to kernel threads, the process can create &lt;em&gt;user threads&lt;&#x2F;em&gt; (or &lt;em&gt;green
threads&lt;&#x2F;em&gt;), which are unknown to the kernel and managed entirely by the process.
These are very fast to create, and can be optimized for the process&#x27;s specific
needs. However, the process must perform the complicated management of threads,
including allocating stacks. Since the kernel only allocates CPU time to kernel
threads, user threads all have to share their process&#x27;s access to the CPU.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cpu-caches&quot;&gt;CPU Caches&lt;a class=&quot;zola-anchor&quot; href=&quot;#cpu-caches&quot; aria-label=&quot;Anchor link for: cpu-caches&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Computing on data in a register takes 1 cycle (~1 nanosecond). Accessing RAM
takes the equivalent time to ~100 cycles. So every time a CPU needs to fetch
data from (or write data to) RAM, it has to idle for about 100 cycles. With
the architecture we described above, we won&#x27;t get the benefits of the CPU
speedups of the last decade.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;CPU caches&lt;&#x2F;em&gt; are small amounts of fast memory near the CPU to cache recently
used data. Modern architectures use a &lt;em&gt;cache hierarchy&lt;&#x2F;em&gt; of successively larger
and slower caches. The most common hierarchy has three levels, called &lt;em&gt;L1&lt;&#x2F;em&gt;,
&lt;em&gt;L2&lt;&#x2F;em&gt;, and &lt;em&gt;L3&lt;&#x2F;em&gt;. Typical access times and cache sizes are given below.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Level&lt;&#x2F;th&gt;&lt;th align=&quot;right&quot;&gt;Cycles&lt;&#x2F;th&gt;&lt;th align=&quot;right&quot;&gt;Size&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Register&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;1&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;8 B&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;L1&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;4&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;64 kB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;L2&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;10&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;256 kB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;L3&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;40&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;8 MB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;RAM&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;100&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;10 GB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;SSD&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;10^5&lt;&#x2F;td&gt;&lt;td align=&quot;right&quot;&gt;1 TB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Current processors will often have separate L1 caches for instructions and
data. Also, each level cache will be shared by a different number of cores,
CPUs, etc, and the chip needs to keep track of when to evict data from the
cache, as well as when data might have been modified elsewhere and must be
invalidated. This is a rich and complicated subject, way beyond our scope
here.&lt;&#x2F;p&gt;
&lt;p&gt;Caches are populated with &lt;em&gt;cache lines&lt;&#x2F;em&gt;, which are typically
aligned&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#aligned-access&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 64 byte regions. Accessing any data in the line will
cause the whole line to be cached. If you read a word at the beginning of a
cache line, you can access the rest of the line almost for free. So if you
have an array of 8-byte integers contained in a contiguous block of memory, you
could iterate over it 8 times faster than if the integers were scattered in
memory (if they were boxed Java Longs, for example). Furthermore, the CPU will
try to predict the next data to be read, and pre-fetch that cache line, which
could lead to a 100x speedup.&lt;&#x2F;p&gt;
&lt;p&gt;The term for related data being together in RAM is termed &lt;em&gt;data locality&lt;&#x2F;em&gt;. The
effect of caches is so significant that modern data structure and algorithm
design considers data locality (and related concerns) to be on par with big-O
complexity calculations. Loops over flat arrays may beat iterating over object
pointers even if traditional algorithmic analysis says otherwise. The term for
algorithms that are designed to efficiently use cache hierarchies are termed
&lt;em&gt;cache-oblivious&lt;&#x2F;em&gt; algorithms. The non-intuitive name is because &lt;em&gt;cache-aware&lt;&#x2F;em&gt;
algorithms are designed for a specific cache hierarchy (with sizes and delays
known), and cache-oblivious algorithms are designed to work well in any
hierarcy.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;aligned-access&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;A chunk of data that is &lt;code&gt;b&lt;&#x2F;code&gt; bytes is said to be aligned if
its address is a multiple of &lt;code&gt;b&lt;&#x2F;code&gt;. Aligned data is much faster for the CPU to
load and use. Thus 8 byte integers should be stored at address like &lt;code&gt;n * 8&lt;&#x2F;code&gt;,
but not &lt;code&gt;n * 8 - 4&lt;&#x2F;code&gt;. 64 byte cache lines therefore start at addresses that
are a multiple of 64.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Computation is done on variables in the &lt;em&gt;registers&lt;&#x2F;em&gt;, which are very small,
very fast chunks of memory in the CPU. The system has a much larger, but much
slower, region of memory called &lt;em&gt;RAM&lt;&#x2F;em&gt;, which must be moved to and from the
registers in order to be worked on. RAM is typically divided into the &lt;em&gt;stack&lt;&#x2F;em&gt;
and the &lt;em&gt;heap&lt;&#x2F;em&gt;. The stack where variables local in scope to a
subroutine&#x2F;function are stored; allocation and deallocation are fast and will
not cause memory leaks. The heap is a larger area of memory that much be
managed more explicitly. Allocating on the heap requires knowing what parts of
the heap are in use, and finding space. Different languages deallocate
differently, including manually (C, C++), garbage collecting (Java, Python,
etc), and having the compiler insert the commands automatically (Rust, ARC in
ObjC).&lt;&#x2F;p&gt;
&lt;p&gt;Multiple processes are managed by the kernel, which allocates resources like
RAM and CPU time.  It prevents processes from interfering with each other&#x27;s
memory using virtual memory, which also allows secondary storage (like disks)
to be used as an extension of RAM.  A process can have multiple threads, which
are &amp;quot;lightweight processes&amp;quot; that share the same memory space, but can parallelize
computation by slicing up time on multiple CPUs.&lt;&#x2F;p&gt;
&lt;p&gt;Because CPUs are so much faster than accessing RAM, a hierarchy of
fast-but-small &lt;em&gt;cpu caches&lt;&#x2F;em&gt; (e.g., &lt;em&gt;L1&lt;&#x2F;em&gt;, &lt;em&gt;L2&lt;&#x2F;em&gt;, &lt;em&gt;L3&lt;&#x2F;em&gt;) are put in or near the
CPU. Data is cached in proximate chunks, so accessing data near previously
accessed data is faster than accessing distant memory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learn-more&quot;&gt;Learn More&lt;a class=&quot;zola-anchor&quot; href=&quot;#learn-more&quot; aria-label=&quot;Anchor link for: learn-more&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;But-How-Know-Principles-Computers&#x2F;dp&#x2F;0615303765&quot;&gt;J Clark Scott: But How Do It Know?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCCKhH1p0tj1frvcD70tEyDg&#x2F;videos&quot;&gt;Jacob Schrum on Virtual Memory, and other things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;speice.io&#x2F;2019&#x2F;02&#x2F;understanding-allocations-in-rust.html&quot;&gt;Bradlee Speice: Allocations in Rust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;software-design&#x2F;why-software-developers-should-care-about-cpu-caches-8da04355bb8a&quot;&gt;Why software developers should care about CPU caches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;WDIkqP4JbkE&quot;&gt;Scott Meyers: CPU Caches and Why You Care&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Presto Data Flow</title>
		<published>2018-05-05T00:00:00+00:00</published>
		<updated>2018-05-05T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/presto-data-flow/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/presto-data-flow/</id>
		<content type="html">&lt;p&gt;Presto&#x27;s speed comes from massively parallelizing queries. We&#x27;ve talked about
how it plans queries to be parallized, now let&#x27;s talk about how it organizes
&lt;em&gt;execution&lt;&#x2F;em&gt; of queries: clients, coordinators, workers, and channels of
communiation between them.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;When a client submits a query to Presto, it connects to a &lt;em&gt;coordinator&lt;&#x2F;em&gt; which
parses the query, plans the computation, and coordinates the flow of data from
the connectors to the workers and between workers.  The client can then
periodically call back to the coordinator, to retrieve status information and
any results that have been finished.&lt;&#x2F;p&gt;
&lt;p&gt;The coordinator acts as the brains of the operation.  It will parse the query,
plan the operations, construct the computation DAG, and requisition workers. It
will feed the input data from the connector into the upstream workers, retrieve
results from the downstream workers, and give status information and results to
the client.&lt;&#x2F;p&gt;
&lt;p&gt;Workers pull data from upstream workers, perform their computation, and give
data to the downstream workers.  Workers will pause working if their output
buffer is not being consumed.  Workers are grouped into &lt;em&gt;stages&lt;&#x2F;em&gt;; workers in
one stage pull data from workers in the upstream stage, but don&#x27;t talk to other
workers in their stage.&lt;&#x2F;p&gt;
&lt;p&gt;This is part 5 of 5 of a series on Presto:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-overview&#x2F;&quot; title=&quot;Presto Overview&quot;&gt;Presto Overview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-connectors&#x2F;&quot; title=&quot;Presto Connectors&quot;&gt;Presto Connectors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-map-reduce&#x2F;&quot; title=&quot;Presto Map-Reduce&quot;&gt;Presto Map-Reduce&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-joins&#x2F;&quot; title=&quot;Presto Joins&quot;&gt;Presto Joins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-data-flow&#x2F;&quot; title=&quot;Presto Data Flow&quot;&gt;Presto Data-Flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;client&quot;&gt;Client&lt;a class=&quot;zola-anchor&quot; href=&quot;#client&quot; aria-label=&quot;Anchor link for: client&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The client only talks to the coordinator, via HTTP POST requests.  The client
initiates the operation by submitting the query text. The response (in JSON)
contains a query handle, which the client uses in subsequent requests to check
the status or download partial results. When the client downloads results, the
coordinator will flush them from memory, freeing up buffer space for more
results.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, if the client does not retrieve results before the coordinator&#x27;s buffer
is filled, the coordinator will stop retrieving results from the final stage
workers, and all of the upstream processes will pause once their buffers are
filled. Thus it is critical that the client performs timely retrieval of the
results. The client receives results in pages (approximately 1MB each), and can
request up to 16 pages in one request.&lt;&#x2F;p&gt;
&lt;p&gt;If the submitted query is an &lt;code&gt;INSERT&lt;&#x2F;code&gt; (or other non-&lt;code&gt;SELECT&lt;&#x2F;code&gt;) statement, the
results are just an acknowledgement, and the operation won&#x27;t block waiting for
the client.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coordinator&quot;&gt;Coordinator&lt;a class=&quot;zola-anchor&quot; href=&quot;#coordinator&quot; aria-label=&quot;Anchor link for: coordinator&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When the coordinator receives the query text (called the &lt;em&gt;statement&lt;&#x2F;em&gt;) from the
client, it parses it into the &lt;em&gt;query&lt;&#x2F;em&gt;.  The query determines &lt;em&gt;stages&lt;&#x2F;em&gt; that can
be done without transferring data between workers, for example mapping
operations followed by a partial aggregation (see [Map-Reduce]). The
coordinator requisitions workers for each stage and sets up &lt;em&gt;exchanges&lt;&#x2F;em&gt; of data
between them.&lt;&#x2F;p&gt;
&lt;p&gt;The coordinator gets an estimate of how many splits of data there are from the
connector, monitors the capacity of the workers of the initial stage, and feeds
splits to any worker that has capacity.  It also monitors workers of the final
stage, grabbing completed results and storing them for the client to retrieve.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;workers&quot;&gt;Workers&lt;a class=&quot;zola-anchor&quot; href=&quot;#workers&quot; aria-label=&quot;Anchor link for: workers&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Workers act as nodes in a computation DAG.  They pull data from upstream
workers, process it, and store the results in an output buffer for downstream
workers to fetch.  If there is room in the output buffer, they repeat this
process.  If the output buffer is full (because the downstream workers aren&#x27;t
pulling), the worker pauses computation until the buffer has room again.&lt;&#x2F;p&gt;
&lt;p&gt;Data is exchanged in &lt;em&gt;pages&lt;&#x2F;em&gt;, which default to 1 MB.  Workers open long-lived
HTTP POST connections with their upstreams to fetch pages.  Once a page is
pulled, the upstream worker can delete it from its output buffer.  Presto has a
configurable max page size which defaults to 16 MB; as there must be at least
one row per page, this means the max row size is equal to the max page size.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;query-planning&quot;&gt;Query Planning&lt;a class=&quot;zola-anchor&quot; href=&quot;#query-planning&quot; aria-label=&quot;Anchor link for: query-planning&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When the coordinator parses the query, it creates a tree of &lt;em&gt;operators&lt;&#x2F;em&gt;, like
&lt;code&gt;Filter&lt;&#x2F;code&gt; or &lt;code&gt;InnerJoin&lt;&#x2F;code&gt;.  Presto combines sequential operators that can
run on one worker into a &lt;em&gt;stage&lt;&#x2F;em&gt;. Between stages, data is &lt;em&gt;exchanged&lt;&#x2F;em&gt;; the
exchange may distribute data to any worker with capacity
(&lt;em&gt;round robin exchange&lt;&#x2F;em&gt;), or to a particular worker based on the hash of a key
(&lt;em&gt;repartitioned exchange&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;A given stage will have one or more &lt;em&gt;pipelines&lt;&#x2F;em&gt;, which are local sequences of
operators.  For example, a stage with only mapping and filtering operators will
have a single pipeline that combines those operators.  But a &lt;code&gt;JOIN&lt;&#x2F;code&gt; stage may
have three pipelines: one to read in the build table and build a hashmap, one to
read the left table, and one to stream the left table through the hashmap and
produce the output.  Between pipelines of a given stage are &lt;em&gt;local exchanges&lt;&#x2F;em&gt;,
which are analogous to the exchanges between stages.&lt;&#x2F;p&gt;
&lt;p&gt;Each stage is parallelized over multiple workers; the &amp;quot;instance&amp;quot; of the stage on
a worker is called a &lt;em&gt;task&lt;&#x2F;em&gt;.  For example, if there were &lt;code&gt;N&lt;&#x2F;code&gt; workers in a &lt;code&gt;JOIN&lt;&#x2F;code&gt;
stage, the &lt;code&gt;k&lt;&#x2F;code&gt;th worker would be responsible for all rows such that
&lt;code&gt;hash(join_key) % N == k&lt;&#x2F;code&gt;. On a given worker, each pipeline is parallelized into
&lt;em&gt;drivers&lt;&#x2F;em&gt;, which divide up the work for the pipeline.  A driver for a pipeline
of mapping operations might just grab any available data, but a driver that is
streaming a left table through a hashmap would futher split the hash table and
streaming rows by hashing.  Thus, the Pipeline&#x2F;Process&#x2F;Driver parallelization is
analogous to that of the Stage&#x2F;Worker&#x2F;Task.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Presto Joins</title>
		<published>2018-05-04T00:00:00+00:00</published>
		<updated>2018-05-04T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/presto-joins/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/presto-joins/</id>
		<content type="html">&lt;p&gt;Joining two database tables is one of the harder operations to make
performant. They are also foundational to most analytical queries. Let&#x27;s talk
about how Presto performs joins, the choices it makes, and how to make your
&lt;code&gt;JOIN&lt;&#x2F;code&gt; queries more efficient.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;In Presto, most joins are done by making a hash table of the right-hand table
(called the &lt;em&gt;build table&lt;&#x2F;em&gt;), and streaming the left-hand table (called the
&lt;em&gt;prop table&lt;&#x2F;em&gt;) through this map.  It joins those pairs of the left and right
tables that satisfy the join condition specified in the &lt;code&gt;ON&lt;&#x2F;code&gt; clause.&lt;&#x2F;p&gt;
&lt;p&gt;First we&#x27;ll look at inner joins, in which rows are joined by an &lt;em&gt;equijoin&lt;&#x2F;em&gt;
condition.  Equijoins are one or more equalities between columns in the left and
right table, like &lt;code&gt;ON customer.id = order.customer_id&lt;&#x2F;code&gt;.  The columns matched
act as a &lt;em&gt;join key&lt;&#x2F;em&gt;, which we&#x27;ll use to distribute the join operation. We&#x27;ll
then expand our discussion to various sorts of outer joins, and other join
conditions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;NB: Many optimizations and implementation details are left out of this
discussion, to focus on the core principles.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is part 4 of 5 of a series on Presto:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-overview&#x2F;&quot; title=&quot;Presto Overview&quot;&gt;Presto Overview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-connectors&#x2F;&quot; title=&quot;Presto Connectors&quot;&gt;Presto Connectors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-map-reduce&#x2F;&quot; title=&quot;Presto Map-Reduce&quot;&gt;Presto Map-Reduce&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-joins&#x2F;&quot; title=&quot;Presto Joins&quot;&gt;Presto Joins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-data-flow&#x2F;&quot; title=&quot;Presto Data Flow&quot;&gt;Presto Data-Flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;basic-joins&quot;&gt;Basic Joins&lt;a class=&quot;zola-anchor&quot; href=&quot;#basic-joins&quot; aria-label=&quot;Anchor link for: basic-joins&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s take a basic example.  Assume we have two tables,
&lt;code&gt;cities (city_name, country_iso2)&lt;&#x2F;code&gt; and &lt;code&gt;countries (country_name, iso2)&lt;&#x2F;code&gt;, and the
query&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; city_name, country_name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cities
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; countries
ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;cities&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;country_iso2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;countries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;iso2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Conceptually, Presto will take &lt;code&gt;countries&lt;&#x2F;code&gt; and build a hash table&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;iso2 -&amp;gt; [ROW(country_name, iso2), ...]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;mapping the join key to the list of right-hand rows with that key. Iterating
through &lt;code&gt;cities&lt;&#x2F;code&gt;, it will look up the country rows via the join key
&lt;code&gt;country_iso2&lt;&#x2F;code&gt;, yielding a combined row
&lt;code&gt;ROW(cities.city_name, cities.country_iso2, countries.country_name, countries.iso2)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To do this, &lt;em&gt;Presto keeps the build table in memory&lt;&#x2F;em&gt;.  This is why it&#x27;s important
to &lt;em&gt;put the smaller table on the right&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the example above, the build hashtable has only one row in the entry for
each value of the &lt;code&gt;iso2&lt;&#x2F;code&gt; join key.  Multiple cities per country are in the
stream, and each matches in turn.  If there were more than one build hashtable
entry per &lt;code&gt;iso2&lt;&#x2F;code&gt;, each matching left-hand row would iterate through the list of
build rows for join key, yielding multiple joined rows.  Hence this method can
support One-to-One, Many-to-One, One-to-Many, and Many-to-Many joins.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;broadcast-joins&quot;&gt;Broadcast Joins&lt;a class=&quot;zola-anchor&quot; href=&quot;#broadcast-joins&quot; aria-label=&quot;Anchor link for: broadcast-joins&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If your right table can fit in memory on one machine, you can do this one one
machine.  If the streaming table isn&#x27;t too large, this will even finish
quickly.  However, if your streaming table has billions of rows, it would take
a long time, but can be easily sped up via parallelization.  If each worker
machine has a copy of the build table, then the input streaming rows can be
easily split across machines, each machine working independently.  This is
called a &lt;em&gt;broadcast join&lt;&#x2F;em&gt;, because the build table is &amp;quot;broadcasted&amp;quot; across the
workers.  If the build table is much smaller than the prop table, this is
extremely fast and efficient, but requires the build table to be able to
fit into memory.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;BroadcastJoin.svg&quot; alt=&quot;Broadcast Join Diagram&quot; title=&quot;Broadcast Join Diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;partitioned-joins&quot;&gt;Partitioned Joins&lt;a class=&quot;zola-anchor&quot; href=&quot;#partitioned-joins&quot; aria-label=&quot;Anchor link for: partitioned-joins&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If the build table cannot fit onto a single machine, we need to split it across
the workers.  This requires us to make sure we stream the rows with a given
join key to workers that have the portion of the build table with that same join
key.  If we have &lt;code&gt;N&lt;&#x2F;code&gt; workers, we can do this by hashing the join key, and
putting the entry with &lt;code&gt;hash(join_key) % N == k&lt;&#x2F;code&gt; on worker &lt;code&gt;k&lt;&#x2F;code&gt;.  We direct the
streaming rows in the same fashion, which ensures the build table rows with a
given join key get matched with all streaming rows of the same key.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;PartitionedJoin.svg&quot; alt=&quot;Partitioned Join Diagram&quot; title=&quot;Partitioned Join Diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;skew&quot;&gt;Skew&lt;a class=&quot;zola-anchor&quot; href=&quot;#skew&quot; aria-label=&quot;Anchor link for: skew&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the example above, some countries likely have more cities than others.  So
even if the countries are evenly split amongst the workers, some workers will have
many more rows than others.  Since the query must wait until the slowest worker
is complete, this will take longer than if the cities were evenly distributed.
This phenomenon is termed &lt;em&gt;skew&lt;&#x2F;em&gt;.  Another cause of skew is if there is some
special value of the join key that has a vastly disproportionate number of
rows; like &lt;code&gt;null&lt;&#x2F;code&gt; for a nullable column.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inner-vs-outer-joins&quot;&gt;Inner vs Outer Joins&lt;a class=&quot;zola-anchor&quot; href=&quot;#inner-vs-outer-joins&quot; aria-label=&quot;Anchor link for: inner-vs-outer-joins&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If a streaming row does not find a match with a join key, it can either be
dropped (Inner Join), put passed through with &lt;code&gt;null&lt;&#x2F;code&gt; fields instead of the
matching right-hand fields (Left Outer Join).&lt;&#x2F;p&gt;
&lt;p&gt;In the case of a Right or Full Outer Join, a set of all matched right rows is
kept by each worker; at the end unmatched right rows are yielded with &lt;code&gt;null&lt;&#x2F;code&gt;
fields instead of the left-hand fields.&lt;&#x2F;p&gt;
&lt;p&gt;This procedure for Right or Full Outer Joins is hard to do if multiple workers
have the same build-side join key: a given worker might not find a match, but
it doesn&#x27;t know if another worker has found a match.  This would be the case in
a Broadcast join, so specifying either of these will force a Partitioned Join.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;join-predicates-and-push-downs&quot;&gt;Join Predicates and Push Downs&lt;a class=&quot;zola-anchor&quot; href=&quot;#join-predicates-and-push-downs&quot; aria-label=&quot;Anchor link for: join-predicates-and-push-downs&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So far, we&#x27;ve only talked about equijoins, but any predicate can be placed in
the &lt;code&gt;ON&lt;&#x2F;code&gt; query.  There are, in general, three types of predicates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Equijoin predicates&lt;&#x2F;strong&gt;: Matching a column in the left table with a column in
the right table, e.g. &lt;code&gt;table1.a = table2.b&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Single-table predicates&lt;&#x2F;strong&gt;: A condition that applies to only one of the two
tables, e.g. &lt;code&gt;table1.c &amp;lt; 10&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Complex predicates&lt;&#x2F;strong&gt;: Any other condition, generally of the form
&lt;code&gt;f(table1, table2)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Equijoins, if present, allow the hash table join we described above.
Single-table predicates are &lt;em&gt;pushed down&lt;&#x2F;em&gt; and applied as a filter to the
individual tables before the join.  Complex predicates have to be applied as the
rows are being joined.&lt;&#x2F;p&gt;
&lt;p&gt;If the join is an inner join, Presto tries to further optimize by pushing down
applicable predicates in the &lt;code&gt;WHERE&lt;&#x2F;code&gt; clause.  For example, the following
statements are equivalent:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; t1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CROSS JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; t2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;b
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a, e
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; t1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) t1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b, f
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; t2
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; d = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
) t2
ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since for outer joins a row that does not match any predicate is yielded (filled
with &lt;code&gt;null&lt;&#x2F;code&gt;s), &lt;em&gt;WHERE-clause predicate pushdown does not happen for outer joins&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cross-joins&quot;&gt;Cross Joins&lt;a class=&quot;zola-anchor&quot; href=&quot;#cross-joins&quot; aria-label=&quot;Anchor link for: cross-joins&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Cross Joins&lt;&#x2F;em&gt; join every row of the left table with every row of the right
table.  Because of this reason, they cannot use Partitioned Joins, and so must
be a Broadcast Join.  This can easily result in an Out Of Memory error if the
build table is large.  Instead of the hash-table lookup, the join is a
&lt;em&gt;Nested Loop Join&lt;&#x2F;em&gt;, in which the streaming table is iterated over, and each
streaming row loops over each build table row.  This quickly becomes inefficient
if the build table is large.&lt;&#x2F;p&gt;
&lt;p&gt;Since a cross join is a form of inner join, Presto pushes down predicates in the
&lt;code&gt;WHERE&lt;&#x2F;code&gt; clause.  If these include equijoins, it converts the join to a
(non-cross) inner join, and any single-table predicates will filter the joined
tables.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; t1, t2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;d
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;is equivalent to&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; t1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b, d
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; t2
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) t2
ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;chained-joins&quot;&gt;Chained Joins&lt;a class=&quot;zola-anchor&quot; href=&quot;#chained-joins&quot; aria-label=&quot;Anchor link for: chained-joins&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A Chained Join is multiple joins in a row:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; table1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; table2 ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;table1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;table2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; table3 ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;table1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;table3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Presto will do the joins one at a time.  First &lt;code&gt;table1&lt;&#x2F;code&gt; with &lt;code&gt;table2&lt;&#x2F;code&gt;, then the
resultant table with &lt;code&gt;table3&lt;&#x2F;code&gt;, and so on.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Presto Map Reduce</title>
		<published>2018-05-03T00:00:00+00:00</published>
		<updated>2018-05-03T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/presto-map-reduce/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/presto-map-reduce/</id>
		<content type="html">&lt;p&gt;Viewed from afar, the query engine consumes one or more input streams of rows,
and produces a single output stream of rows.  In this note, we focus on the
basic case where there is one input stream that gets converted to the output
stream.  This is conceptually similar to the Map-Reduce paradigm, where rows get
filtered, transformed, exploded, or aggregated into new rows.  For performance,
Presto constructs these to be as parallelizable as possible.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;em&gt;NB: Many optimizations and implementation details are left out of this
discussion, to focus on the core principles.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is part 3 of 5 of a series on Presto:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-overview&#x2F;&quot; title=&quot;Presto Overview&quot;&gt;Presto Overview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-connectors&#x2F;&quot; title=&quot;Presto Connectors&quot;&gt;Presto Connectors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-map-reduce&#x2F;&quot; title=&quot;Presto Map-Reduce&quot;&gt;Presto Map-Reduce&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-joins&#x2F;&quot; title=&quot;Presto Joins&quot;&gt;Presto Joins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-data-flow&#x2F;&quot; title=&quot;Presto Data Flow&quot;&gt;Presto Data-Flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;mapping-operations&quot;&gt;Mapping Operations&lt;a class=&quot;zola-anchor&quot; href=&quot;#mapping-operations&quot; aria-label=&quot;Anchor link for: mapping-operations&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Mapping operations take a single row, and produce 0, 1, or many rows. These are
very parallelizable -- since the operations takes only one row, you can simply
split the rows among different workers.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Filter&lt;&#x2F;strong&gt;: A filter operation takes a predicate and applies it to each row.
If the predicate returns true it yields the row, otherwise it yields nothing.
These correspond to &lt;code&gt;WHERE&lt;&#x2F;code&gt; and &lt;code&gt;HAVING&lt;&#x2F;code&gt; clauses.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Projection&lt;&#x2F;strong&gt;: A projection operation takes a map function and applies it to
each row.  It yields the transformed row.  This can drop, rename, combine, or
transform columns.  The column expression in the &lt;code&gt;SELECT&lt;&#x2F;code&gt; statement encodes
the projection operation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unnest&lt;&#x2F;strong&gt;: An unnest operation takes a row, and yields &lt;code&gt;N&lt;&#x2F;code&gt; rows.  In
Presto, this is from a &lt;code&gt;CROSS JOIN UNNEST&lt;&#x2F;code&gt; statement that will expand an array
or map into rows for each entry.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Given a sequence of mapping operations, Presto combines them into a &lt;em&gt;fragment&lt;&#x2F;em&gt;.
Multiple workers can perform this fragment, parallelizing the stream processing.&lt;&#x2F;p&gt;
&lt;p&gt;For example, let&#x27;s consider the table &lt;code&gt;orders&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| order_id  | all_item_quantities
+-----------+---------------------
| order_id1 | MAP(ARRAY[price1, price2, ...], ARRAY[quantity1, quantity2, ...])
+-----------+---------------------
| ...       | ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the query&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; order_id, item_quantity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; item_price AS item_total
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; orders
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CROSS JOIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; UNNEST(all_item_quantities) AS t (item_price, item_quantity)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; item_quantity &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The incoming rows would be of the form &lt;code&gt;ROW(order_id, all_item_quantities)&lt;&#x2F;code&gt;.
Presto would first apply an unnest operator&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;r -&amp;gt; ROW(order_id=r.order_id, item_price=price1, item_quantity=quantity1),
     ROW(order_id=r.order_id, item_price=price2, item_quantity=quantity2),
     ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The produced rows would be of the form &lt;code&gt;ROW(order_id, item_price, item_quantity)&lt;&#x2F;code&gt;.
Next, Presto will apply a filter operation with predicate&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;r -&amp;gt; r.item_quantity &amp;gt; 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then a map operation&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;r -&amp;gt; ROW(order_id=r.order_id, item_total=r.item_quantity * r.item_price)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These operators would all be composed into a single fragment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reducing-operations&quot;&gt;Reducing Operations&lt;a class=&quot;zola-anchor&quot; href=&quot;#reducing-operations&quot; aria-label=&quot;Anchor link for: reducing-operations&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;While mapping operations can be easily parallelized, reducing operations (like
&lt;code&gt;GROUP BY&lt;&#x2F;code&gt;) require more effort to make efficient.  Luckily, Presto does most of
this work.  This section will first describe the simple-but-inefficient method,
and then successive optimizations that Presto does for us.&lt;&#x2F;p&gt;
&lt;p&gt;If there is a &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; clause, multiple rows (with the same group key) will be
aggregated into one.  In the simplest case, where there are no aggregation
functions (like &lt;code&gt;SUM()&lt;&#x2F;code&gt;, &lt;code&gt;COUNT()&lt;&#x2F;code&gt;, etc), the worker will just store the row in
memory, yielding only one instance.  This is equivalent to &lt;code&gt;SELECT DISTINCT&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If there is an aggregation function, the worker must remember the current
aggregation data.  The amount of data stored depends on the function; for some
(like &lt;code&gt;SUM&lt;&#x2F;code&gt;) this is a single number, while for others (like &lt;code&gt;ARRAY_AGG&lt;&#x2F;code&gt;) it is
a field for each row aggregated over.&lt;&#x2F;p&gt;
&lt;p&gt;A non-efficient but correct model would be to partition the rows amongst workers
using the hash of the group key; this ensures a mostly equal distribution, which
all rows for a given key going to the same worker. This worker can then fully
aggregate, knowing it has seen all the relevant rows.  However, using
&lt;em&gt;partial aggregation&lt;&#x2F;em&gt; we can do this much more efficiently.&lt;&#x2F;p&gt;
&lt;p&gt;Consider the following query:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; user_id, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(order_amount) AS total_spent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; orders
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; user_id
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Assume the first phase is split amongst two mapping workers &lt;code&gt;M1&lt;&#x2F;code&gt; and &lt;code&gt;M2&lt;&#x2F;code&gt;
(perhaps &lt;code&gt;orders&lt;&#x2F;code&gt; is actually a complex subquery), and there are two grouping
workers &lt;code&gt;G1&lt;&#x2F;code&gt; and &lt;code&gt;G2&lt;&#x2F;code&gt;, where &lt;code&gt;G1&lt;&#x2F;code&gt; will handle all odd &lt;code&gt;user_id&lt;&#x2F;code&gt;s and &lt;code&gt;G2&lt;&#x2F;code&gt; will
handle all even &lt;code&gt;user_id&lt;&#x2F;code&gt;s.  The inefficient way would be for each mapping
worker to send each row to either &lt;code&gt;G1&lt;&#x2F;code&gt; or &lt;code&gt;G2&lt;&#x2F;code&gt;, depending on the &lt;code&gt;user_id&lt;&#x2F;code&gt;.
However, &lt;code&gt;M1&lt;&#x2F;code&gt; and &lt;code&gt;M2&lt;&#x2F;code&gt; could locally store a hash table &lt;code&gt;{user_id: partial_sum}&lt;&#x2F;code&gt;.  Then, once they have consumed all the rows, they can send these
partial sums to the appropriate grouping worker.  This is far less data than
sending the individual rows!  &lt;code&gt;G1&lt;&#x2F;code&gt; and &lt;code&gt;G2&lt;&#x2F;code&gt; can then do a simple sum of the
partial sums for each &lt;code&gt;user_id&lt;&#x2F;code&gt; they get.&lt;&#x2F;p&gt;
&lt;p&gt;Futhermore, the mapping workers don&#x27;t have to wait until they have consumed all
rows; they can send partial sums whenever they are running low on memory! The
grouping workers will get a (relatively slow) stream of partial sums, which they
will aggregate to the final sums.&lt;&#x2F;p&gt;
&lt;p&gt;Often, a more complex function can be made partially aggregable with an
intermediate representation.  Consider the arithmetic mean operator &lt;code&gt;avg&lt;&#x2F;code&gt;.
Presto cannot simply average different slice of data and then average the
averages. Instead, Presto partially aggregates into a structure &lt;code&gt;{key:, sum:, count:}&lt;&#x2F;code&gt;, and then aggregates the partial aggregations.  Any function that can
be represented in this way can be efficiently aggregated in parallel.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;intermediate-representation-example&quot;&gt;Intermediate Representation Example&lt;a class=&quot;zola-anchor&quot; href=&quot;#intermediate-representation-example&quot; aria-label=&quot;Anchor link for: intermediate-representation-example&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Consider another example: &lt;code&gt;SELECT COUNT(DISTINCT x)&lt;&#x2F;code&gt;.  The naive method would be
to have a single node at the end, collecting all values of &lt;code&gt;x&lt;&#x2F;code&gt; into a set, then
evaluating the size of the set.  The first optimization is that the upstream
worker nodes could maintain their own partial set.  The final node would union
all these sets, returning the size as above.  Although parallelizable, the
storage requirements still scale as &lt;code&gt;O(num_outputs)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Presto implements &lt;code&gt;COUNT(DISTINCT X)&lt;&#x2F;code&gt; as&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; x
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; x
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this, Presto partitions the inner query across workers by hashing &lt;code&gt;x&lt;&#x2F;code&gt;.
Each worker stores the set of distinct &lt;code&gt;x&lt;&#x2F;code&gt; for a partition, counts it, then
passes the count to the final aggregator.  While the total storage is still
&lt;code&gt;O(num_outputs)&lt;&#x2F;code&gt;, it&#x27;s distributed over many machines.&lt;&#x2F;p&gt;
&lt;p&gt;However, if a small approximation is acceptable, vastly more performant options
are available.  The function &lt;code&gt;approx_distinct&lt;&#x2F;code&gt; uses a fast, constant-space,
and parallelizable intermediate representation called
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HyperLogLog&quot;&gt;HyperLogLog&lt;&#x2F;a&gt;.
Each upstream worker node can accumate their intermediate representation, and
the final node can combine these to the final estimate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sorting-operations&quot;&gt;Sorting Operations&lt;a class=&quot;zola-anchor&quot; href=&quot;#sorting-operations&quot; aria-label=&quot;Anchor link for: sorting-operations&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;SQL also has the &lt;code&gt;ORDER BY&lt;&#x2F;code&gt; clause.  In the current implementation, by default
the merge is performed on a single worker.  This may lead to a OOM error for
large datasets.  Distributed merge can be enabled by the &lt;code&gt;distributed_sort&lt;&#x2F;code&gt;
session parameter.  In distributed sort, each worker sorts a part of the data
and sends it to a worker for a final merge sort.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Presto Connectors</title>
		<published>2018-05-02T00:00:00+00:00</published>
		<updated>2018-05-02T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/presto-connectors/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/presto-connectors/</id>
		<content type="html">&lt;p&gt;Presto is a SQL query engine, one that ultimately understands how to consume one
or more input streams of rows and produce an output stream of rows.  At its
core, it doesn&#x27;t understand things like datastores, disk IO, primary keys, and
partitions.  To be practically useful, it needs to be able to connect to
datastores, which it does via &lt;em&gt;connectors&lt;&#x2F;em&gt;.  A connector is specific to a
particular datastore (say, MySQL, Hive, Cassandra, etc), and is what understands
concepts such as disk IO, partitions, etc.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This is part 2 of 5 of a series on Presto:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-overview&#x2F;&quot; title=&quot;Presto Overview&quot;&gt;Presto Overview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-connectors&#x2F;&quot; title=&quot;Presto Connectors&quot;&gt;Presto Connectors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-map-reduce&#x2F;&quot; title=&quot;Presto Map-Reduce&quot;&gt;Presto Map-Reduce&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-joins&#x2F;&quot; title=&quot;Presto Joins&quot;&gt;Presto Joins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-data-flow&#x2F;&quot; title=&quot;Presto Data Flow&quot;&gt;Presto Data-Flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;presto-storage-model&quot;&gt;Presto Storage Model&lt;a class=&quot;zola-anchor&quot; href=&quot;#presto-storage-model&quot; aria-label=&quot;Anchor link for: presto-storage-model&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;While Presto doesn&#x27;t know about datastores, it has a set of abstractions that it
expects a connector to respect.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Row&lt;&#x2F;strong&gt;: A row is a named tuple, and is the basic unit of data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Split&lt;&#x2F;strong&gt;: A split is one or more rows, yielded as a unit for performance.  A
table will contain one or more splits.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Table&lt;&#x2F;strong&gt;: A table is the basic storage concept in Presto.  They consist of
a number of (unordered) rows grouped into one or more splits.  They are
familar concepts in SQL databases and Hive, although they can be applied to
CSV files or anything else that can generate rows.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Schema&lt;&#x2F;strong&gt;: Collections of tables are grouped into schemas.  A schema is
equivalent to a database in the SQL or Hive world, but it could also be a
directory of CSV files.  Anything that can be a logical collection of
tables can be a schema.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Catalog&lt;&#x2F;strong&gt;: A catalog is a collection of schemas.  A database cluster is
an example.  Each catalog has one connector, so the schemas must be of the
same datastore type.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A warehouse that had both MySQL and Hive clusters would need (at minimum) two
catalogs, one for MySQL and one for Hive.  While each catalog has one connector,
it&#x27;s possible that two catalogs can use the same connector type to access the
same datastore type. Consider the case where there are separate clusters for
user-facing MySQL databases and warehouse MySQL databases.  You could make two
catalogs, &lt;code&gt;user-mysql&lt;&#x2F;code&gt; and &lt;code&gt;warehouse-mysql&lt;&#x2F;code&gt;, each of which uses the MySQL
connector, initialized with different parameters.&lt;&#x2F;p&gt;
&lt;p&gt;A fully-qualified table name is of the form &lt;code&gt;{catalog}.{schema}.{table}&lt;&#x2F;code&gt;, like
&lt;code&gt;hive.warehouse.dim_orders&lt;&#x2F;code&gt; or &lt;code&gt;mysql.user_data.addresses&lt;&#x2F;code&gt;.  A given Presto
session can set default catalogs and schemas, allowing just the table name to be
used.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;connectors&quot;&gt;Connectors&lt;a class=&quot;zola-anchor&quot; href=&quot;#connectors&quot; aria-label=&quot;Anchor link for: connectors&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When Presto wants data from a table, it looks up the connector specified for the
catalog.  The connector is specific to a given datasource, for example the MySQL
connector or the Hive connector.&lt;&#x2F;p&gt;
&lt;p&gt;A table is grouped into data chunks called &lt;em&gt;splits&lt;&#x2F;em&gt;.  Presto queries the
connector, which reports how many splits are available.  This is used to plan
the query and determine parallelization.  The connector reads the table, sending
the splits to the appropriate workers to be processed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;delegating-predicates&quot;&gt;Delegating Predicates&lt;a class=&quot;zola-anchor&quot; href=&quot;#delegating-predicates&quot; aria-label=&quot;Anchor link for: delegating-predicates&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The most naive connector would read the entire table, yielding all splits.
However, if the query has filter predicates like &lt;code&gt;WHERE country = &#x27;DE&#x27;&lt;&#x2F;code&gt;, Presto
can &lt;em&gt;delegate&lt;&#x2F;em&gt; the predicate to the connector.  The connector can filter these
rows before sending them to the workers, reducing unneeded network IO and
computation.  Futhermore, if the connector has understanding of things such as
primary keys, indices, partitions, etc, it can use the optimizations build into
the datastore to be even more efficient.&lt;&#x2F;p&gt;
&lt;p&gt;One effect of this is that two conditions that might be logically equivalent may
be result in dramatically different performance.  If the predicate is of a form
that is understood by the connector, it can do the work before Presto ever sees
the unwanted rows.&lt;&#x2F;p&gt;
&lt;p&gt;Presto pushes down all the viable predicates (generally just equalities) to the
connector.  The connector&#x27;s use of them is best effort; it must return a
superset of the results that would pass the where clause, but it may return any
superset. Thus, Presto will apply the predicates again to all rows it receives.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;federated-queries&quot;&gt;Federated Queries&lt;a class=&quot;zola-anchor&quot; href=&quot;#federated-queries&quot; aria-label=&quot;Anchor link for: federated-queries&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A very important consequence of the connector model is that Presto treats all
rows equally, for any datasource.  In particular, this means that a single query
can get rows from different databases, or even different data sources (MySQL and
Hive, for example).&lt;&#x2F;p&gt;
&lt;p&gt;In Presto, it&#x27;s possible to do the following query, which reads from two
different data sources, and writes to a different database.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;INSERT INTO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;metrics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.ranking
  customer_id,
  customer_ranking,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;date
SELECT
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;mysql_customers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;customer_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;AS customer_id,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hive_customers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;customer_ranking &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;AS customer_ranking,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;current_date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() AS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;date
FROM
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;warehouse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.customer_statistics AS hive_customers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;JOIN
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.customers AS mysql_customers
ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;mysql_customers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;customer_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hive_customers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;customer_id
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;writing-output&quot;&gt;Writing output&lt;a class=&quot;zola-anchor&quot; href=&quot;#writing-output&quot; aria-label=&quot;Anchor link for: writing-output&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Commonly, the results of a query are inserted into another table with an
&lt;code&gt;INSERT INTO&lt;&#x2F;code&gt; statement.  Presto will stream its output rows into the output
connector, which is responsible for writing the data in a format appropriate to
the datastore.  Similar to the comment on federated queries above, the output
connector can be from a different catalog (and thus different data source) than
the input connector(s).  This makes Presto a very efficient way to scrape or
replicate tables between different data sources.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Presto Overview</title>
		<published>2018-05-01T00:00:00+00:00</published>
		<updated>2018-05-01T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/presto-overview/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/presto-overview/</id>
		<content type="html">&lt;p&gt;Presto is a fast SQL query engine, but it&#x27;s different than most technologies
in its class. Understanding the philosophy and architecture of Presto allows
you to write more performant queries, and debug misbehaving ones. In these
articles, you&#x27;ll learn about Presto&#x27;s approach to map-reduce, joins, data
sources, and data flow. You&#x27;ll understand why some join conditions are more
efficient than others, why the small table should be on the right, when to
use distributed joins, and how to structure your subqueries.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;These articles are aimed at developers who use Presto, but want to understand
how the magic happens. &lt;em&gt;This is not an introductory tutorial&lt;&#x2F;em&gt;, nor is it
aimed at DBA-level optimization. The goal is to give a simplified but
reasonably accurate mental model of how things work under the hood. We avoid
details that would obfuscate the high-level understanding. Conversely, we
assume the reader has some experience working with Presto, or at least SQL.&lt;&#x2F;p&gt;
&lt;p&gt;This is part 1 of 5 of a series on Presto:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-overview&#x2F;&quot; title=&quot;Presto Overview&quot;&gt;Presto Overview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-connectors&#x2F;&quot; title=&quot;Presto Connectors&quot;&gt;Presto Connectors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-map-reduce&#x2F;&quot; title=&quot;Presto Map-Reduce&quot;&gt;Presto Map-Reduce&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-joins&#x2F;&quot; title=&quot;Presto Joins&quot;&gt;Presto Joins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;presto-data-flow&#x2F;&quot; title=&quot;Presto Data Flow&quot;&gt;Presto Data-Flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;core-concept-1-sql-query-engine-not-datastore&quot;&gt;Core Concept 1: SQL Query Engine, not Datastore&lt;a class=&quot;zola-anchor&quot; href=&quot;#core-concept-1-sql-query-engine-not-datastore&quot; aria-label=&quot;Anchor link for: core-concept-1-sql-query-engine-not-datastore&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Presto, at its heart, has no concept of disks or where data is stored.  It
delegates that to &lt;em&gt;connectors&lt;&#x2F;em&gt;, which read data from (and write to) popular
datastores such as MySQL, Hive, etc.  The connectors stream rows into Presto,
which process them, streaming the results out to clients or other connectors.
This has the important effects:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All datasources are equivalent to Presto, and you can write &lt;em&gt;federated
queries&lt;&#x2F;em&gt; which combine multiple databases and even datastores.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Presto has no native concept of indices, primary keys, partitions, or other
things that make storage and access more efficient.  Logic for these must
reside in the connector.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;core-concept-2-in-memory-and-streaming&quot;&gt;Core Concept 2: In-memory and streaming&lt;a class=&quot;zola-anchor&quot; href=&quot;#core-concept-2-in-memory-and-streaming&quot; aria-label=&quot;Anchor link for: core-concept-2-in-memory-and-streaming&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Presto is blazingly fast compared to Hive, Pig, etc, because it does not perform
any disk IO while processing a query.  It streams data, transforming each row,
and passing data to other machines via sockets.&lt;&#x2F;p&gt;
&lt;p&gt;This has several important consequences:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Since there is no disk IO, Presto is &lt;em&gt;fast&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Since it cannot store data to disk, Presto is &lt;em&gt;memory limited&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Presto only reads enough data to fill the pipeline; if one step stops,
everything upstream stops too.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Since it streams data, it cannot inspect data for optimization.  Each stage
sees each row only once.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;a class=&quot;zola-anchor&quot; href=&quot;#acknowledgements&quot; aria-label=&quot;Anchor link for: acknowledgements&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;These articles would have been impossible without the help of Presto team members
Maria Basmanova (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mbasmanova&quot;&gt;&lt;img src=&quot;&#x2F;zola-test&#x2F;GitHub-Mark-64px.png&quot; alt=&quot;GitHubUser&quot; &#x2F;&gt; mbasmanova&lt;&#x2F;a&gt;),
Rebecca Schlussel (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rschlussel&quot;&gt;&lt;img src=&quot;&#x2F;zola-test&#x2F;GitHub-Mark-64px.png&quot; alt=&quot;GitHubUser&quot; &#x2F;&gt; rschlussel&lt;&#x2F;a&gt;), and
Andrii Rosa (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arhimondr&quot;&gt;&lt;img src=&quot;&#x2F;zola-test&#x2F;GitHub-Mark-64px.png&quot; alt=&quot;GitHubUser&quot; &#x2F;&gt; arhimondr&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python Generators</title>
		<published>2017-05-01T00:00:00+00:00</published>
		<updated>2017-05-01T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/python-generators/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/python-generators/</id>
		<content type="html">&lt;p&gt;One of Python&#x27;s strengths is its powerful generators.  Even a basic understand
of them unlocks the the ability to elegantly handle even huge datasets.  But
they hold some suprises in what is executed when -- understand them at a deeper
level allows you to use and debug them more effectively.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;iterables-and-iterators&quot;&gt;Iterables and Iterators&lt;a class=&quot;zola-anchor&quot; href=&quot;#iterables-and-iterators&quot; aria-label=&quot;Anchor link for: iterables-and-iterators&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First, some basics.  An &lt;em&gt;iterable&lt;&#x2F;em&gt; is an object like a list or a tuple
that can be iterated over in a &lt;code&gt;for&lt;&#x2F;code&gt; loop.  We will see shortly that there are
other types of iterables.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;a = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;a:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(i)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
# 2
# 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An &lt;em&gt;iterator&lt;&#x2F;em&gt; &lt;code&gt;itr&lt;&#x2F;code&gt; is an object with an &lt;code&gt;__next()__&lt;&#x2F;code&gt; method which yields the
next object to be iterated over. If there are no more objects, &lt;code&gt;next()&lt;&#x2F;code&gt; will
instead raise a &lt;code&gt;StopIteration&lt;&#x2F;code&gt; exception. The pythonic way to do this is the
builtin &lt;code&gt;next&lt;&#x2F;code&gt; function: &lt;code&gt;next(itr)&lt;&#x2F;code&gt;. There is a deep connection between
iterables and iterators; part of the iterable contract is that an iterable
must expose an &lt;code&gt;__iter__()&lt;&#x2F;code&gt; method which returns an iterator. The pythonic
way to call this is using the builtin &lt;code&gt;iter()&lt;&#x2F;code&gt; method: &lt;code&gt;iter(a)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;a = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
itr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(a)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(itr))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(itr))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(itr))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# StopIteration
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In fact, the &lt;code&gt;for&lt;&#x2F;code&gt; loop over an iterable &lt;code&gt;a&lt;&#x2F;code&gt; can be implemented as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Vanilla for loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;a:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# or the iterator version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;itr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(a)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(itr)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;StopIteration:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To make life slightly easier, &lt;em&gt;iterators must also be iterables&lt;&#x2F;em&gt;; i.e. they
must expose the &lt;code&gt;__iter__&lt;&#x2F;code&gt; method, which in this case will just return
themselves:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]) is [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;itr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(itr) is itr
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One important difference between iterators and most iterables is that
iterators are always one-shot, while iterables might be able to be consumed
more than once. If call &lt;code&gt;next&lt;&#x2F;code&gt; on an iterator (in a for loop or otherwise),
you are consuming one iteration, and it can&#x27;t be consumed again. When you
iterate over most iterables (like lists, etc), you create a new iterator,
which starts from the beginning.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;a = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;print1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;itbl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;itbl:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(a)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(a)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(a)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(b)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(b)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(b)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Nothing!  We have exhausted b already.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In fact, for many iterables, you can create multiple independent iterators:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;a = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(a)
c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(a)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(b)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(c)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(c)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(c)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(c)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# StopIteration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(b)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(b)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(b)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# StopIteration
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To summarize, an iterable is something that exposes an iterator via &lt;code&gt;iter&lt;&#x2F;code&gt;, and
an iterator is something that you can call &lt;code&gt;next&lt;&#x2F;code&gt; on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generators&quot;&gt;Generators&lt;a class=&quot;zola-anchor&quot; href=&quot;#generators&quot; aria-label=&quot;Anchor link for: generators&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you use the &lt;code&gt;yield&lt;&#x2F;code&gt; keyword in a function, it does not return a normal value,
but instead returns a generator.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;():
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;g = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(g)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &amp;lt;type &amp;#39;generator&amp;#39;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Generators are in fact iterators.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(g))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(g))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# StopIteration
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each time you call the function, you&#x27;ll get a new, independent, iterator.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;():
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;g1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
g2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(g1))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(g1))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# StopIteration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(g2))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(g2))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# StopIteration
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of the most important features of a generator is that it lazily yields
values. Between &lt;code&gt;next&lt;&#x2F;code&gt; calls, it suspends execution, but maintains its
internal state. The classic example is the infinite counter, which lazily
produces an infinite sequence of integers.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;():
  c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;c
    c += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will never raise a &lt;code&gt;StopIteration&lt;&#x2F;code&gt;; it will continue to count forever.  Be
careful not to iterate it in a &lt;code&gt;for&lt;&#x2F;code&gt; loop without a &lt;code&gt;break&lt;&#x2F;code&gt; statement!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s examine the sequence of operations of this simple generator more closely.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;():
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Starting counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;)
    c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;c
        c += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Incremented counter to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, c)

count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Starting counter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Counted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, y)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Counted 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Incremented counter to 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Counted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, y)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Counted 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s examine the flow:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;count = counter()&lt;&#x2F;code&gt;  initializes the generator, assigning to &lt;code&gt;count&lt;&#x2F;code&gt; an
iterator.  Notice it does not execute anything inside of counter.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y = next(count)&lt;&#x2F;code&gt; iterates the iterator, executing the code in &lt;code&gt;counter&lt;&#x2F;code&gt; up
to the first time we yield.  It assigns the yielded value &lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;y&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;print &#x27;Counted&#x27;, y&lt;&#x2F;code&gt; prints the yielded value &lt;code&gt;0&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y = next(count)&lt;&#x2F;code&gt; executes the loop from the first &lt;code&gt;yield&lt;&#x2F;code&gt; to the second.  It
also assigns the yielded value &lt;code&gt;1&lt;&#x2F;code&gt; to &lt;code&gt;y&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;print &#x27;Counted&#x27;, y&lt;&#x2F;code&gt; prints the yielded value &lt;code&gt;1&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;sending&quot;&gt;Sending&lt;a class=&quot;zola-anchor&quot; href=&quot;#sending&quot; aria-label=&quot;Anchor link for: sending&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is a basic generator that you can use to iterate&#x2F;etc. But &lt;code&gt;yield&lt;&#x2F;code&gt; also
has a special power; it can receive values from the outside the function and
assign them to variables inside. Let&#x27;s make a basic consumer:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;():
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Starting printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
        x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Printing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, x)

p = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(p)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Starting printer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Outside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, y)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Outside None
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(p)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Printing None
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Outside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, y)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Outside None
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This creates a generator that doesn&#x27;t yield anything.  Let&#x27;s follow the flow.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;p = printer()&lt;&#x2F;code&gt; creates p, which does not do any execution.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y = next(p)&lt;&#x2F;code&gt; executes &lt;code&gt;printer&lt;&#x2F;code&gt; up to the line &lt;code&gt;x = yield&lt;&#x2F;code&gt;, which
waits for iteration.  Since we didn&#x27;t specify anything to yield that&#x27;s the
equivalent of &lt;code&gt;yield None&lt;&#x2F;code&gt;, and &lt;code&gt;y&lt;&#x2F;code&gt; is assigned to &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;print(&#x27;Outside&#x27;, y)&lt;&#x2F;code&gt; Since &lt;code&gt;y&lt;&#x2F;code&gt; is &lt;code&gt;None&lt;&#x2F;code&gt;, we print &lt;code&gt;Outside None&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y = next(p)&lt;&#x2F;code&gt; executes &lt;code&gt;printer&lt;&#x2F;code&gt; from the &lt;code&gt;yield&lt;&#x2F;code&gt;.  We assign the result of
the &lt;code&gt;yield&lt;&#x2F;code&gt; expression to &lt;code&gt;x&lt;&#x2F;code&gt;.  This is also &lt;code&gt;None&lt;&#x2F;code&gt;, because we didn&#x27;t &lt;code&gt;send&lt;&#x2F;code&gt;
anything -- foreshadowing!  Since we are yet again not yielding anything,
&lt;code&gt;None&lt;&#x2F;code&gt; is returned and assigned to &lt;code&gt;y&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;print(&#x27;Outside&#x27;, y)&lt;&#x2F;code&gt; Since &lt;code&gt;y&lt;&#x2F;code&gt; is &lt;code&gt;None&lt;&#x2F;code&gt;, we print &lt;code&gt;Outside None&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For &lt;code&gt;yield&lt;&#x2F;code&gt; to actually receive information, we need to use the &lt;code&gt;send&lt;&#x2F;code&gt; method
of the generator.  In the above example, we didn&#x27;t send anything to &lt;code&gt;p&lt;&#x2F;code&gt;, because
we wanted to emphases that &lt;code&gt;printer&lt;&#x2F;code&gt; is just a normal generator, but that
&lt;code&gt;yield&lt;&#x2F;code&gt; actually returns a value that can be assigned to a variable.  Now let&#x27;s
actually get to &lt;code&gt;send&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;p = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
y = p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Starting printer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Outside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, y)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Outside None
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;y = p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Printing a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Outside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, y)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Outside None
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Printing 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we&#x27;re sending things to the generator to be processed.  Let&#x27;s follow the
flow.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;p = printer()&lt;&#x2F;code&gt; creates p, which does not do any execution.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y = p.send(None)&lt;&#x2F;code&gt; starts the generators execution, exactly like &lt;code&gt;next(p)&lt;&#x2F;code&gt;
would.  In fact, you could replace this with &lt;code&gt;next(p)&lt;&#x2F;code&gt; and it would be the same.
You need to &amp;quot;prime&amp;quot; the generator in this way; if you try to send a non-&lt;code&gt;None&lt;&#x2F;code&gt;
value to a just-started generator, it will throw an error.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;print(&#x27;Outside&#x27;, y)&lt;&#x2F;code&gt; prints the value of &lt;code&gt;y&lt;&#x2F;code&gt;, which is &lt;code&gt;None&lt;&#x2F;code&gt;, because &lt;code&gt;send&lt;&#x2F;code&gt;
has no return value.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y = p.send(&#x27;a&#x27;)&lt;&#x2F;code&gt; sends the value &lt;code&gt;&#x27;a&#x27;&lt;&#x2F;code&gt; to the generator.  The line
&lt;code&gt;x = yield&lt;&#x2F;code&gt; means that it will assign to &lt;code&gt;x&lt;&#x2F;code&gt; the value that is sent, in this
case &lt;code&gt;&#x27;a&#x27;&lt;&#x2F;code&gt;, and so that is printed before we loop around to the &lt;code&gt;yield&lt;&#x2F;code&gt;
statement again.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;print(&#x27;Outside&#x27;, y)&lt;&#x2F;code&gt; shows that &lt;code&gt;y&lt;&#x2F;code&gt; is still &lt;code&gt;None&lt;&#x2F;code&gt;, and will always be so.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;p.send(2)&lt;&#x2F;code&gt; sends the value &lt;code&gt;2&lt;&#x2F;code&gt;, which is printed as expected.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now how do we tie these together?  Here&#x27;s a very simple way:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
p = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
    p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count))

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &amp;gt; Starting counter
# &amp;gt; Printing 0
# &amp;gt; Incremented counter to 1
# &amp;gt; Printing 1
# &amp;gt; Incremented counter to 2
# &amp;gt; Printing 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We say that &lt;code&gt;count&lt;&#x2F;code&gt; is a producer (because it is yielding results to the
outside), and &lt;code&gt;p&lt;&#x2F;code&gt; is a consumer, because we are sending values to it. Of
course, we can have a generator that consumes a producer.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;times2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Starting times2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
        x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(gen)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Multiplying &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; by 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; % x)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*x

count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
t2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;times2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(t2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &amp;gt; Starting times2
# &amp;gt; Starting counter
# &amp;gt; Multiplying 0 by 2
# 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(t2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &amp;gt; Incremented counter to 1
# &amp;gt; Multiplying 1 by 2
# 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;while&lt;&#x2F;code&gt; statement above is actually just a cumbersome &lt;code&gt;for&lt;&#x2F;code&gt; loop. It
could be written as&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;times2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;gen:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Git Remote Branches</title>
		<published>2017-03-03T00:00:00+00:00</published>
		<updated>2017-03-03T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/git-remote/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/git-remote/</id>
		<content type="html">&lt;p&gt;Git&#x27;s power is in collaboration, and that comes from remote branches.
Everyone&#x27;s used a remote branch, but juggling multiple remotes and keeping
local and remote branches in sync can be challenging. Here, we explain how
remote branches work, how to manage them effectively, and how to set one up
yourself.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;We assume you understand local &lt;a href=&quot;https:&#x2F;&#x2F;jagill.github.io&#x2F;zola-test&#x2F;git-remote&#x2F;git-dag.md&quot;&gt;git commits&lt;&#x2F;a&gt;. Now let&#x27;s talk
about remote branches, which is how we unlock the power of distributed
version control. There are a couple important concepts that we will talk more
about later, but the terminology of local and remote branches and repos can
be a bit confusing, so let&#x27;s introduce them now:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Local repository&lt;&#x2F;strong&gt;: This is a git repo on your local machine -- it&#x27;s what
you get when you clone another repo.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Local branch&lt;&#x2F;strong&gt;: A local branch is the branch you are used to. It lives
in your local repo (on your machine), and you can commit to it via the normal
workflow.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Remote repository&lt;&#x2F;strong&gt;: A remote repository (usually just called &lt;em&gt;remote&lt;&#x2F;em&gt;) is a
repository different than your local repository that your local repo is
tracking.  It may have local branches, just like your local repo.  You can
pull from a remote repo, which will bring the local branches of the remote
repo into the remote branches of your local repo (we&#x27;ll explain that later).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Remote branch&lt;&#x2F;strong&gt;: A remote branch is a local copy of a branch on a remote
repo. It will be shown in &lt;code&gt;git branch --all&lt;&#x2F;code&gt; as &lt;code&gt;REMOTE&#x2F;BRANCH&lt;&#x2F;code&gt;.  These
track the local branches of remote repos.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;NB&lt;&#x2F;strong&gt;: We&#x27;ve abbreviated the output of the &lt;code&gt;fetch&lt;&#x2F;code&gt; and &lt;code&gt;push&lt;&#x2F;code&gt; subcommands
for clarity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;remote-repositories&quot;&gt;Remote Repositories&lt;a class=&quot;zola-anchor&quot; href=&quot;#remote-repositories&quot; aria-label=&quot;Anchor link for: remote-repositories&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Every git repo -- including the local one on your machine -- is a complete
repo, with all the commit history back to the root commit.  This includes the
branches (which are just pointers to a given commit).  The branches consist
of at least &lt;code&gt;master&lt;&#x2F;code&gt;, but often several others.  A fundamental operation in
git is to clone a repository, which makes a local repository by copying all of
the commit history from another repository (eg, one on GitHub).  Usually this
&amp;quot;remote&amp;quot; repo is on another machine, but you can clone any repo with a valid
git URL, including one on your own machine.  We&#x27;ll do that for the tutorial,
but normally this repo would be somewhere else.  Let&#x27;s make the &amp;quot;remote&amp;quot; repo.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmp&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ mkdir git-remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmp&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd git-remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git-remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --bare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git-remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remote&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve created a special kind of repo called a &amp;quot;bare&amp;quot; (or &amp;quot;headless&amp;quot;) repo.
It does not have a &lt;code&gt;HEAD&lt;&#x2F;code&gt; pointer, so it&#x27;s not a place you can directly
do work or commit to, but it can get commits from other places (as we will
do shortly).&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s clone it to a &amp;quot;local&amp;quot; repo.  This will make a &amp;quot;downstream&amp;quot; repo; one
that will track the changes in the &amp;quot;upstream&amp;quot; (remote) repo.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git-remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git clone remote local1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cloning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; into &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;local1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git-remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  remote&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the &lt;code&gt;git clone&lt;&#x2F;code&gt; command, &lt;code&gt;remote&lt;&#x2F;code&gt; is the URL of the &amp;quot;parent&amp;quot; repo (in this
case, just a directory), and &lt;code&gt;local1&lt;&#x2F;code&gt; is the path of the local repo.  Notice
that it makes a directory named &lt;code&gt;local1&lt;&#x2F;code&gt;.  Let&#x27;s make a commit and push it to
the remote.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git-remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd local1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; &amp;gt; a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git add a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
cdf451e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;tmp&#x2F;git-remote&#x2F;remote
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;new branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;      master -&amp;gt; master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e (HEAD -&amp;gt; master, origin&#x2F;master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that after we pushed, a new branch appeared, &lt;code&gt;origin&#x2F;master&lt;&#x2F;code&gt;.  This is a
&lt;code&gt;remote&lt;&#x2F;code&gt; branch, which tracks a local branch on a remote repository.
What happened in the remote repo?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd ..&#x2F;remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
cdf451e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The commit is now in the remote branch, as is the &lt;code&gt;master&lt;&#x2F;code&gt; branch.  Let&#x27;s clone
it to a new local branch.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git-remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git clone remote local2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cloning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; into &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;local2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git-remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd local2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e (HEAD -&amp;gt; master, origin&#x2F;master, origin&#x2F;HEAD) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The new repo has all the commits that the remote repo has.  Let&#x27;s make a change
here, and see what happens on &lt;code&gt;local1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ echo A2 &amp;gt;&amp;gt; a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git commit a.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734] A2
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;tmp&#x2F;git-remote&#x2F;remote
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cdf451e..c65a734&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  master -&amp;gt; master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd ..&#x2F;remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd ..&#x2F;local1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e (HEAD -&amp;gt; master, origin&#x2F;master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While the changes are in the &lt;code&gt;remote&lt;&#x2F;code&gt; repo, they are not yet in &lt;code&gt;local1&lt;&#x2F;code&gt;.  We
can &lt;code&gt;fetch&lt;&#x2F;code&gt; these changes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git fetch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (origin&#x2F;master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have the new commit, but our local &lt;code&gt;master&lt;&#x2F;code&gt; doesn&#x27;t point to it.  We see
the remote branch &lt;code&gt;origin&#x2F;master&lt;&#x2F;code&gt; points to the new commit; we can &lt;code&gt;merge&lt;&#x2F;code&gt; that
into our local &lt;code&gt;master&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git merge origin&#x2F;master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Updating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e..c65a734
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fast-forward
 a.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; +
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (HEAD -&amp;gt; master, origin&#x2F;master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our branches, as well as our commits, are the same on &lt;code&gt;local1&lt;&#x2F;code&gt; and &lt;code&gt;local2&lt;&#x2F;code&gt;.
Since this operation is performed so frequently, there&#x27;s a shortcut command for
it: &lt;code&gt;git pull&lt;&#x2F;code&gt;.  It will perform a &lt;code&gt;git fetch&lt;&#x2F;code&gt;, then a
&lt;code&gt;git merge origin&#x2F;CURRENT_BRANCH&lt;&#x2F;code&gt;.  If your current branch doesn&#x27;t have a
remote tracking branch, it will return an error.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;fetch&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;merge&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;pull&lt;&#x2F;code&gt; distinction is an important one, so we&#x27;ll emphasize
it here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;&#x2F;code&gt; fetches all the commits from the remote repo to the local repo,
and updates the remote branches.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git merge&lt;&#x2F;code&gt; can merge a remote branch into a local one.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;&#x2F;code&gt; is a shortcut that fetches and then merges a remote tracking branch
into the current local one.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;multiple-branches&quot;&gt;Multiple Branches&lt;a class=&quot;zola-anchor&quot; href=&quot;#multiple-branches&quot; aria-label=&quot;Anchor link for: multiple-branches&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;One common point of confusion arises when people want to push a local branch to
a remote repo.  Conceptually, you often want to create a new branch on &lt;code&gt;origin&lt;&#x2F;code&gt;
with the same name as your local branch, and have your local branch track this
branch.  The default option in git does not do this, which sometimes leads to
confusion.  Let&#x27;s do it the wrong way first.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; to a new branch &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ echo B1 &amp;gt; b.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git add b.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ade622a] B1
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mode 100644 b.txt

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -vv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This should any upstream branches
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* dev    ade622a
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;origin&#x2F;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A2

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fatal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; The current branch dev has no upstream branch.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; push the current branch and set the remote as upstream, use

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --set-upstream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; origin dev

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git push origin dev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Notice we did not include --set-upstream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;To &#x2F;tmp&#x2F;git-remote&#x2F;remote
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;new branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;      dev -&amp;gt; dev

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git pull
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;There&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; is no tracking information for the current branch.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Please&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; specify which branch you want to merge with.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;See&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git-pull(1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; details

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pull &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;

If you wish to set tracking information for this branch you can do so with:

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --set-upstream-to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=origin&#x2F;&amp;lt;branch&amp;gt; dev

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -vv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Notice still no upstream branch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* dev    ade622a
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;origin&#x2F;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A2

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --set-upstream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; origin dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; dev set up to track remote branch dev from origin.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -vv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# There&amp;#39;s the upstream branch!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* dev    ade622a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;origin&#x2F;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; B1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;origin&#x2F;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A2

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git pull
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Already&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; up-to-date.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that we can&#x27;t push without arguments, because git does not know what to
do with this new branch.  We can tell it specifically which remote and which branch
to push to, but unless we tell it to set that remote branch as an upstream
tracking branch, it doesn&#x27;t know that we want to keep those branches in sync.&lt;&#x2F;p&gt;
&lt;p&gt;As a side note, &lt;code&gt;git branch [-v, --v]&lt;&#x2F;code&gt; is a useful tool to display what git knows
about your branches.&lt;&#x2F;p&gt;
&lt;p&gt;Now that the &lt;code&gt;dev&lt;&#x2F;code&gt; is tracking &lt;code&gt;origin&#x2F;dev&lt;&#x2F;code&gt;, commits by either local repo can
be transferred to the other.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd ..&#x2F;local2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -a
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; master
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remotes&#x2F;origin&#x2F;HEAD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; -&amp;gt; origin&#x2F;master
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remotes&#x2F;origin&#x2F;master
local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git fetch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;Users&#x2F;jag&#x2F;tmp&#x2F;git-remote2&#x2F;remote
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;new branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;      dev        -&amp;gt; origin&#x2F;dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -a
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; master
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remotes&#x2F;origin&#x2F;HEAD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; -&amp;gt; origin&#x2F;master
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remotes&#x2F;origin&#x2F;dev
  remotes&#x2F;origin&#x2F;master
local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ade622a (origin&#x2F;dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (HEAD -&amp;gt; master, origin&#x2F;master, origin&#x2F;HEAD) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git checkout dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; dev set up to track remote branch dev from origin.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; to a new branch &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ade622a (HEAD -&amp;gt; dev, origin&#x2F;dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (origin&#x2F;master, origin&#x2F;HEAD, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can work on branch &lt;code&gt;dev&lt;&#x2F;code&gt; in &lt;code&gt;local2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ echo B2 &amp;gt;&amp;gt; b.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git commit b.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 73a9efd] B2
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;Users&#x2F;jag&#x2F;tmp&#x2F;git-remote2&#x2F;remote
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ade622a..73a9efd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  dev -&amp;gt; dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd ..&#x2F;local1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ade622a (HEAD -&amp;gt; dev, origin&#x2F;dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (origin&#x2F;master, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git pull
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;Users&#x2F;jag&#x2F;tmp&#x2F;git-remote2&#x2F;remote
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ade622a..73a9efd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  dev        -&amp;gt; origin&#x2F;dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Updating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ade622a..73a9efd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fast-forward
 b.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; +
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 73a9efd (HEAD -&amp;gt; dev, origin&#x2F;dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ade622a (origin&#x2F;temp) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (origin&#x2F;master, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now people working in two different local branches can coordinate through a
remote branch.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;multiple-remotes&quot;&gt;Multiple Remotes&lt;a class=&quot;zola-anchor&quot; href=&quot;#multiple-remotes&quot; aria-label=&quot;Anchor link for: multiple-remotes&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The flow we just described is called the &#x27;centralized&#x27; workflow, because
all commits are going through a single, central, remote repository.  However,
git was designed first and foremost to be a distributed system, allowing
people to manage commits from many remotes.&lt;&#x2F;p&gt;
&lt;p&gt;One of the main ways that people use this is for pull requests.  If someone
wishes to contribute to your repository, they will often fork it, push changes
to their remote repository, and let you review the changes before you decide
to merge them into your branch.  Let&#x27;s do that for our two users, &lt;code&gt;local1&lt;&#x2F;code&gt;
and &lt;code&gt;local2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s create and set up another remote, called &lt;code&gt;remote2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git-remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --bare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; remote&#x2F; remote2&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cloning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; into bare repository &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;remote2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git-remote&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd local2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;origin
local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git remote add remote2 ..&#x2F;remote2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;origin
remote2
local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git fetch remote2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# fetch by default uses origin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;From ..&#x2F;remote2
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;new branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;      dev        -&amp;gt; remote2&#x2F;dev
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;new branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;      master     -&amp;gt; remote2&#x2F;master
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve cloned another remote off of our original remote repository, and added it
as a remote for &lt;code&gt;local2&lt;&#x2F;code&gt;.  Let&#x27;s push a change to the &lt;code&gt;dev&lt;&#x2F;code&gt; branch of &lt;code&gt;remote2&lt;&#x2F;code&gt;,
so that &lt;code&gt;local1&lt;&#x2F;code&gt; can review the changes.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git checkout dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ echo B3 &amp;gt;&amp;gt; b.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git commit b.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c992ab9] B3
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git push remote2 dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ..&#x2F;remote2
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;73a9efd..c992ab9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  dev -&amp;gt; dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c992ab9 (HEAD -&amp;gt; dev, remote2&#x2F;dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B3
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 73a9efd (origin&#x2F;dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ade622a B1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (remote2&#x2F;master, origin&#x2F;master, origin&#x2F;HEAD, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that we have remote branches for both remote repos.  When we pushed, we
needed to explicitly set the remote and the branch to push to, because the
local branch &lt;code&gt;dev&lt;&#x2F;code&gt; is set to track &lt;code&gt;origin&#x2F;dev&lt;&#x2F;code&gt;, which is supplied as a default
if we just use &lt;code&gt;git push&lt;&#x2F;code&gt;.  Since we don&#x27;t want to push to the default, we need
to be explicit.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s go to &lt;code&gt;local1&lt;&#x2F;code&gt; and pull these changes to another branch, review the diffs,
and merge them.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ cd ..&#x2F;local1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git remote add remote2 ..&#x2F;remote2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git fetch remote2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ..&#x2F;remote2
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;new branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;      dev        -&amp;gt; remote2&#x2F;dev
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;new branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;      master     -&amp;gt; remote2&#x2F;master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c992ab9 (remote2&#x2F;dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B3
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 73a9efd (HEAD -&amp;gt; dev, origin&#x2F;dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ade622a (origin&#x2F;temp) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (remote2&#x2F;master, origin&#x2F;master, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So now we have the new code in the remote branch &lt;code&gt;remote2&#x2F;dev&lt;&#x2F;code&gt;.  Let&#x27;s make
a branch that tracks it, so that we can see the changes.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git branch dev2 remote2&#x2F;dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; dev2 set up to track remote branch dev from remote2.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git lola
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c992ab9 (remote2&#x2F;dev, dev2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B3
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 73a9efd (HEAD -&amp;gt; dev, origin&#x2F;dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ade622a (origin&#x2F;temp) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c65a734 (remote2&#x2F;master, origin&#x2F;master, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdf451e A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git checkout dev2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; to branch &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dev2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Your&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; branch is up-to-date with &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;remote2&#x2F;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First, we create a local branch &lt;code&gt;dev2&lt;&#x2F;code&gt; which tracks the remote branch &lt;code&gt;remote2&#x2F;dev&lt;&#x2F;code&gt;, and then checked it out.  If we wanted to modify it
and push those changes upstream, we could.  Or, we can merge it into
our local version of &lt;code&gt;dev&lt;&#x2F;code&gt;, and push those changes upstream to
&lt;code&gt;origin&#x2F;dev&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git checkout dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Switched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; to branch &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Your&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; branch is up-to-date with &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;origin&#x2F;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git merge dev2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Updating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 73a9efd..c992ab9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fast-forward
 b.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; +
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local1&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; $ git push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;Users&#x2F;jag&#x2F;tmp&#x2F;git-remote2&#x2F;remote
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;73a9efd..c992ab9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  dev -&amp;gt; dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now these changes can be seen by &lt;code&gt;local2&lt;&#x2F;code&gt;, as normal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve seen that each repo is a complete record of the codebase.  Local repos
are where people make modifications, and remote repos are places that changes
can be distributed to others.  The most common model is the centralized model,
where everyone shares a single remote repo.  Another model is distributed, and
in the extreme case every person has their own remote repo that they can push
changes to, and that others can pull from.&lt;&#x2F;p&gt;
&lt;p&gt;A local repo has both local branches, and remote branches which track the
&amp;quot;local&amp;quot; branches of the remote repos.  A branch can &amp;quot;track&amp;quot; another branch,
which means when the upstream (tracked) has changes, &amp;quot;pull&amp;quot; will merge
those changes into the downstream (tracking) branch, and a &amp;quot;push&amp;quot; will merge
changes from the downstream branch to the upstream.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Git Reset</title>
		<published>2017-03-02T00:00:00+00:00</published>
		<updated>2017-03-02T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/git-reset/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/git-reset/</id>
		<content type="html">&lt;p&gt;An important part of version control is the ability to go back to previous 
states -- particularly if your recent changes messed something up!  Git
has the powerful &lt;code&gt;reset&lt;&#x2F;code&gt; command, but it has a bewildering array of
slightly-but-crucially-different modes.  People generally start out memorizing
a couple &lt;code&gt;reset&lt;&#x2F;code&gt; commands for common tasks, but still have questions like
&amp;quot;what does &lt;code&gt;git reset --soft&lt;&#x2F;code&gt; do anyway?&amp;quot;.  In this article, we&#x27;ll build up
a mental model of how Git views changes, which will allow us to unlock the full
power of &lt;code&gt;reset&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;code&gt;git-reset&lt;&#x2F;code&gt; has several options, and using it effectively requires
understanding some fundamental concepts in git: HEAD, the index, and the
working tree. Underlying all of these is the familiar concept of the
filetree; this is just the files and directories under the root of the git
repo.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-four-stages-of-commitment&quot;&gt;The four stages of commitment&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-four-stages-of-commitment&quot; aria-label=&quot;Anchor link for: the-four-stages-of-commitment&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;An important conceptual model to have in our mind is the four stages changes go
through in the &lt;code&gt;git commit&lt;&#x2F;code&gt; process.  We&#x27;ll find that the the various options
of &lt;code&gt;git reset&lt;&#x2F;code&gt; differ primarily in how they move around these four stages of
commitment.  These are the file tree, the working tree, the index, and HEAD.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The file tree is just the changes that are on disk; this is the familiar
non-git concept.&lt;&#x2F;li&gt;
&lt;li&gt;The working tree is those changes to the file tree that git knows about.  Any
changes to the file tree in a file that is tracked by git are automatically
known, and thus on the working tree.&lt;&#x2F;li&gt;
&lt;li&gt;The index is those changes that are staged to be included in the next commit.
Changes are generally moved from the working tree to the index by &lt;code&gt;git add&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;HEAD is the commit you are currently on.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll give examples for those four in a second, but let&#x27;s talk about &lt;code&gt;git diff&lt;&#x2F;code&gt;
and &lt;code&gt;git status&lt;&#x2F;code&gt;.  When you use &lt;code&gt;git diff&lt;&#x2F;code&gt;, it shows the differences between
the index and the working tree.  Thus it does not show staged changes.  Using
&lt;code&gt;git diff --staged&lt;&#x2F;code&gt; (alias: &lt;code&gt;git diff --cached&lt;&#x2F;code&gt;) shows the differences between
HEAD and the index.&lt;&#x2F;p&gt;
&lt;p&gt;The command &lt;code&gt;git status&lt;&#x2F;code&gt; will show you what files have
changes in the index (staged changes, under &amp;quot;Changes to be committed:&amp;quot;),
changes in the working tree but not in the index (unstaged cahnges, under
&amp;quot;Changes not staged for commit:&amp;quot;), and files that are not known to git
(under &amp;quot;Untracked files:&amp;quot;).  Note that it&#x27;s quite possible for a given file
to have both staged and unstaged changes (see below).&lt;&#x2F;p&gt;
&lt;p&gt;In this tutorial when we use &lt;code&gt;git status&lt;&#x2F;code&gt; or &lt;code&gt;git diff&lt;&#x2F;code&gt;, we abbreviate the
output for brevity.  The actual output you see will be more verbose.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-index-and-working-tree&quot;&gt;The index and working tree&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-index-and-working-tree&quot; aria-label=&quot;Anchor link for: the-index-and-working-tree&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First let&#x27;s review the index and the working tree, which are necessary to
understand git reset.  If you feel very comfortable with them, feel free to
breeze through this section, just setting up the commits.  We&#x27;ll use those
commits in the discussion of git-reset below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-index&quot;&gt;The index&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-index&quot; aria-label=&quot;Anchor link for: the-index&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The index is a staging area where changes are held before they are committed.
Let&#x27;s see it in action in a simple scenario.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mkdir git-reset &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git-reset
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Initialized&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; empty Git repository in &#x2F;Users&#x2F;jag&#x2F;tmp&#x2F;git-reset&#x2F;.git&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &amp;gt; a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Untracked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; files:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a.txt
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In terms of the four stages, we have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A1 &amp;lt; filetree
NULL &amp;lt; HEAD, index, worktree
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(An initialized git repo starts with no commits, so HEAD is not defined).&lt;&#x2F;p&gt;
&lt;p&gt;At this point, we have a single untracked file.  By definition, this file is
in the filetree, but git has no knowledge of it yet.   That&#x27;s why &lt;code&gt;git diff&lt;&#x2F;code&gt;
does not tell us about the changes to &lt;code&gt;a.txt&lt;&#x2F;code&gt;. As soon as git knows
about it, it is considered in the &lt;em&gt;working tree&lt;&#x2F;em&gt;; and git helpfully tells us
to add it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git add a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; to be committed:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file:   a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So now git knows about it, but why did &lt;code&gt;git diff&lt;&#x2F;code&gt; still return nothing?
Because the &lt;code&gt;a.txt&lt;&#x2F;code&gt; is actually in the &lt;em&gt;index&lt;&#x2F;em&gt;.  The index is like a
&#x27;commit-in-waiting&#x27;; by adding changes you are building up what will be the
next commit.  We can check the diff with the &lt;code&gt;--staged&lt;&#x2F;code&gt; option:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --staged
new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file mode 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In terms of our four stages, we have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A1 &amp;lt; index, worktree, filetree
NULL &amp;lt; HEAD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s a lot of information here, but we can see that it&#x27;s a new file, and
the contents are the expected &#x27;A1&#x27;.  Let&#x27;s commit it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (root-commit) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5b2c703]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A1
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mode 100644 a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Nothing here after commit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ A1=`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rev-parse HEAD`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last line just stores the current commit hash in a variable we&#x27;ll use
later.  The details aren&#x27;t important, but if you want to know more you can
&lt;code&gt;git help rev-parse&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The four stages are now all pointing to the same commit:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A1 &amp;lt; HEAD, index, worktree, filetree
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;the-working-tree&quot;&gt;The working tree&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-working-tree&quot; aria-label=&quot;Anchor link for: the-working-tree&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We can think of HEAD, the index, and the working tree as accumulating the
changes we are making to the file tree.  Now that we have commited A1,
HEAD, the index, and the working tree are all up-to-date with the file tree.&lt;&#x2F;p&gt;
&lt;p&gt;Now that &lt;code&gt;a.txt&lt;&#x2F;code&gt; is known to git, changes to it show up in the working tree.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; &amp;gt;&amp;gt; a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; not staged for commit:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modified:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b&#x2F;a.txt
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
+A2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our picture looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A2 &amp;lt; worktree, filetree
A1 &amp;lt; HEAD, index
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Adding &lt;code&gt;a.txt&lt;&#x2F;code&gt; moves the changes from the working tree to the index:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ git add a.txt
$ git status
Changes to be committed:
	modified:   a.txt
$ git diff
$ git diff --staged
--- a&#x2F;a.txt
+++ b&#x2F;a.txt
 A1
+A2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our picture looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A2 &amp;lt; index, worktree, filetree
A1 &amp;lt; HEAD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The changes no longer appear in &lt;code&gt;git diff&lt;&#x2F;code&gt;, just in &lt;code&gt;git diff --staged&lt;&#x2F;code&gt;.  If we
change &lt;code&gt;a.txt&lt;&#x2F;code&gt; again, the new changes are not in the index, just the working tree.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; &amp;gt;&amp;gt; a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; to be committed:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modified:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; not staged for commit:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modified:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b&#x2F;a.txt
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
 A2
+A3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --staged
---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b&#x2F;a.txt
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
+A2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our stages are:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A3 &amp;lt; worktree, filetree
A2 &amp;lt; index
A1 &amp;lt; HEAD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that &lt;code&gt;git diff --staged&lt;&#x2F;code&gt; has not changed, but the new changes are in
&lt;code&gt;git diff&lt;&#x2F;code&gt;.  Now if we commit, we just commit the things in the index.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cdd1bff] A2
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --short
Changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; not staged for commit:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modified:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A2=`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rev-parse HEAD`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The index changes are gone, but the working tree is left unchanged.  Note that
the file tree is unchanged; we&#x27;ve just been catching the commits up to the index.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A3 &amp;lt; worktree, filetree
A2 &amp;lt; HEAD, index
A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lastly, let&#x27;s commit the last changes so that we are positioned to explore
&lt;code&gt;git reset&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git add a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# A3 &amp;lt; index, worktree, filetree
# A2 &amp;lt; HEAD
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 813395c] A3
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A3=`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rev-parse HEAD`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now everything is pointed at A3!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A3 &amp;lt; HEAD, index, worktree, filetree
A2
A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;the-many-flavors-of-git-reset&quot;&gt;The many flavors of git reset&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-many-flavors-of-git-reset&quot; aria-label=&quot;Anchor link for: the-many-flavors-of-git-reset&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;reset&lt;&#x2F;code&gt; command takes a bewildering number of forms and options.  We&#x27;ll
attempt to demystify these.  The fundamental principal is that &lt;code&gt;git reset&lt;&#x2F;code&gt;
moves HEAD to the commit specified, and the options control what happens
to the index, working tree, and file tree.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hard-reset&quot;&gt;hard reset&lt;a class=&quot;zola-anchor&quot; href=&quot;#hard-reset&quot; aria-label=&quot;Anchor link for: hard-reset&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s start with &lt;code&gt;git reset --hard&lt;&#x2F;code&gt;.  This is the simplest to understand,
because it moves all four stages to the designated commit.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate
813395c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
cdd1bff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5b2c703&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --hard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate
cdd1bff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
5b2c703&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cat a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
A2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A3
A2 &amp;lt; HEAD, index, worktree, filetree
A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using &lt;code&gt;git reset --hard COMMIT&lt;&#x2F;code&gt; tells git to make all files that it knows
about into the form expected by &lt;code&gt;COMMIT&lt;&#x2F;code&gt;.  Note that it doesn&#x27;t touch any
untracked files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;soft-and-mixed&quot;&gt;Soft and Mixed&lt;a class=&quot;zola-anchor&quot; href=&quot;#soft-and-mixed&quot; aria-label=&quot;Anchor link for: soft-and-mixed&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Make sure you are on the &lt;code&gt;A3&lt;&#x2F;code&gt; commit:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --hard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our four stages are:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A3 &amp;lt; HEAD, index, worktree, filetree
A2
A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you &lt;code&gt;git reset --soft COMMIT&lt;&#x2F;code&gt;, it resets &lt;code&gt;HEAD&lt;&#x2F;code&gt; to point to &lt;code&gt;COMMIT&lt;&#x2F;code&gt;, but
leaves the index, working tree, and file tree unchanged.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --soft &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
Changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; to be committed:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modified:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --staged
---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b&#x2F;a.txt
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
 A2
+A3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate
cdd1bff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
5b2c703&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve moved &lt;code&gt;HEAD&lt;&#x2F;code&gt; back to the A2 commit.  Notice that &lt;code&gt;a.txt&lt;&#x2F;code&gt; is in the index.&lt;&#x2F;p&gt;
&lt;p&gt;We have&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A3 &amp;lt; index, worktree, filetree
A2 &amp;lt; HEAD
A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead, if we had used &lt;code&gt;git reset --mixed&lt;&#x2F;code&gt;, we&#x27;d have left the changes in the
working tree.  (Note that &lt;code&gt;--mixed&lt;&#x2F;code&gt; is the default level, so &lt;code&gt;git reset&lt;&#x2F;code&gt; is
equivalent to &lt;code&gt;git reset --mixed&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --hard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --mixed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
Unstaged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; changes after reset:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; not staged for commit:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modified:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b&#x2F;a.txt
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
 A2
+A3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate
cdd1bff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
5b2c703&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A3 &amp;lt; worktree, filetree
A2 &amp;lt; HEAD, index
A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s combine the two, to show their difference more clearly.  From the
above state, we can use &lt;code&gt;git reset --soft&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --soft &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; to be committed:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modified:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; not staged for commit:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modified:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b&#x2F;a.txt
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
 A2
+A3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git diff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --staged
---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b&#x2F;a.txt
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
+A2
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate
5b2c703&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;A3 &amp;lt; worktree, filetree
A2 &amp;lt; index
A1 &amp;lt; HEAD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we understand the difference between &lt;code&gt;--soft&lt;&#x2F;code&gt;, &lt;code&gt;--mixed&lt;&#x2F;code&gt;, and
&lt;code&gt;--hard&lt;&#x2F;code&gt;, let&#x27;s get back to A3:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --hard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;reset-vs-checkout&quot;&gt;reset vs checkout&lt;a class=&quot;zola-anchor&quot; href=&quot;#reset-vs-checkout&quot; aria-label=&quot;Anchor link for: reset-vs-checkout&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;While both &lt;code&gt;git reset&lt;&#x2F;code&gt; and &lt;code&gt;git checkout&lt;&#x2F;code&gt; change where HEAD is pointing, they
do this in fundamentally different ways.  &lt;code&gt;git checkout&lt;&#x2F;code&gt; moves HEAD to
point to the given branch (or commit-ish), without moving any branches.
&lt;code&gt;git reset&lt;&#x2F;code&gt; instead moves the active branch (pointed to by HEAD) to the supplied
commit-ish, dragging HEAD along with it.  In other words, &lt;code&gt;git checkout&lt;&#x2F;code&gt; switches
what you are working on, while &lt;code&gt;git reset&lt;&#x2F;code&gt; modifies what you are working on.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1fd9bf6 (HEAD -&amp;gt; dev, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ad01fba A2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 3162ad7 A1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; echo B1 &amp;gt;&amp;gt; b.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git add b.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b0e3450 (HEAD -&amp;gt; dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1fd9bf6 (master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ad01fba A2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 3162ad7 A1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b0e3450 (dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1fd9bf6 (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ad01fba A2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 3162ad7 A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that the &lt;code&gt;dev&lt;&#x2F;code&gt; branch does not change, only the position of HEAD.
Contrast this with when you &lt;code&gt;reset&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git checkout dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b0e3450 (HEAD -&amp;gt; dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1fd9bf6 (master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ad01fba A2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 3162ad7 A1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git reset master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1fd9bf6 (HEAD -&amp;gt; dev, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ad01fba A2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 3162ad7 A1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git reset b0e3450
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --oneline --decorate --all
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; b0e3450 (HEAD -&amp;gt; dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1fd9bf6 (master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ad01fba A2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 3162ad7 A1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you reset, you move the branch as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve seen the four stages of commitment, namely filetree, working tree, index,
and HEAD.  The &lt;code&gt;reset&lt;&#x2F;code&gt; command conceptually moves those four stages; this in
turn might affect the content of files or whether changes are staged or
committed.  It can be useful to undo work, or to get the filetree&#x2F;index in
the appropriate state.&lt;&#x2F;p&gt;
&lt;p&gt;It differs at a fundamental from the &lt;code&gt;checkout&lt;&#x2F;code&gt; command, even though
sometimes their effects look similar. The checkout command doesn&#x27;t affect the
underlying commits, only where HEAD is pointing; you cannot lose committed
data, only move along the commit DAG. The &lt;code&gt;reset&lt;&#x2F;code&gt; command changes state at a
more fundamental level (especially the &lt;code&gt;--hard&lt;&#x2F;code&gt; option); you can undo work
and modify the commit DAG, even removing commits from it.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Git Commit Dag</title>
		<published>2017-03-01T00:00:00+00:00</published>
		<updated>2017-03-01T00:00:00+00:00</updated>
		<link href="https://jagill.github.io/zola-test/git-dag/" type="text/html"/>
		<id>https://jagill.github.io/zola-test/git-dag/</id>
		<content type="html">&lt;p&gt;Git is a powerful version control system, but the mental model can be
complex. Beginners can find such concepts as fast-forward merges confusion,
and sooner or later everyone ends up in the dreaded &amp;quot;detached head&amp;quot; mode.
This article will build up a mental model of Git to understand what&#x27;s really
happening, ensuring that you&#x27;re never trapped, and allowing you to perform
impressive feats of Git surgery with aplomb.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;git-commits-as-a-dag&quot;&gt;Git commits as a DAG&lt;a class=&quot;zola-anchor&quot; href=&quot;#git-commits-as-a-dag&quot; aria-label=&quot;Anchor link for: git-commits-as-a-dag&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The fundamental object that we&#x27;ll be talking about is a
commit&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#commit-blobs&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. A commit is the current state of the file tree, along
with some metadata. Some of this metadata is an author, and a message the
author includes to explain the changes since the last commit. Another
extremely important bit of metadata is the commit&#x27;s parent commits. Most
commits have a single parent, which is the previous state of the file tree.
Sometimes, such as in a merge, a commit has multiple parents, since it
inherits from and reconciles two or more different states. A fancy way of
saying this is that a git repo forms a Directed Acyclic Graph (or DAG), with
the commits as nodes, and the parent relationship being an arrow.&lt;&#x2F;p&gt;
&lt;p&gt;Before we get started, let&#x27;s make some aliases that will make visualization
easier.  Enter the following commands:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; alias.lol &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log --graph --decorate --pretty=oneline --abbrev-commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; alias.lola &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log --graph --decorate --pretty=oneline --abbrev-commit --all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also, make sure you have the latest version of git (as of this writing, 2.5.0).
On OS X, I suggest installing git via &lt;a href=&quot;http:&#x2F;&#x2F;brew.sh&#x2F;&quot;&gt;Homebrew&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-first-commit&quot;&gt;Our first commit&lt;a class=&quot;zola-anchor&quot; href=&quot;#our-first-commit&quot; aria-label=&quot;Anchor link for: our-first-commit&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s make this concrete.  Make a new directory called &lt;code&gt;git-dag-tutorial&lt;&#x2F;code&gt;,
enter it, and then initialize the git repository:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mkdir git-dag-tutorial
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cd git-dag-tutorial
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;On&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; branch master

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Initial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; commit

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; to commit (create&#x2F;copy files and use &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;git add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; to track)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You now have an empty repository; it doesn&#x27;t even have a commit yet.  Let&#x27;s
make our first commit.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; &amp;gt; a.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Make a file just containing &amp;#39;A0&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ git add a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (root-commit) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c32f318]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A0
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mode 100644 a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A0
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A0=`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rev-parse HEAD`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The repo now has as a single commit,  and this commit is the only one that does
not have a parent.  This is an important property of a repo -- there is only
one &#x27;root&#x27; commit, so if you trace back the ancestry of any commit, you will
eventually end up here.&lt;&#x2F;p&gt;
&lt;p&gt;The command &lt;code&gt;git lol&lt;&#x2F;code&gt; will show us the current commit (called &lt;code&gt;HEAD&lt;&#x2F;code&gt;), and its
parent(s) recursively until we reach the root commit.  Try it now.  We only
have one commit, so it will just show that.  The first column is of the form
&lt;code&gt;c32f318...&lt;&#x2F;code&gt;; the crazy hex number is called the commit hash.  It will
be different for everybody, so in the last line we just saved it in the
environment variable &lt;code&gt;A0&lt;&#x2F;code&gt;.  Also, try &lt;code&gt;git show HEAD&lt;&#x2F;code&gt;; notice that it shows you
that same commit, with some more information on it.&lt;&#x2F;p&gt;
&lt;p&gt;We are also on a branch.  Type &lt;code&gt;git branch&lt;&#x2F;code&gt;, and notice it outputs &lt;code&gt;* master&lt;&#x2F;code&gt;.
This means we are on the master branch.  A branch is really just a pointer to
a given commit that keeps up as we create new commits.  Try &lt;code&gt;git show master&lt;&#x2F;code&gt;;
notice that it gives the same commit.  Actually, we were being inaccurate above;
in reality HEAD doesn&#x27;t point to our first commit A0, it points to &lt;code&gt;master&lt;&#x2F;code&gt; which
then points to A0.  This is shown in the output of &lt;code&gt;git lol&lt;&#x2F;code&gt;; a single commit,
with a hash that we&#x27;ll represent by A0, that is pointed to by branch &lt;code&gt;master&lt;&#x2F;code&gt;.
&lt;code&gt;HEAD&lt;&#x2F;code&gt; in turns points to &lt;code&gt;master&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s important to understand the difference between when &lt;code&gt;HEAD&lt;&#x2F;code&gt; pointing to
&lt;code&gt;master&lt;&#x2F;code&gt; which points to A0, and when both &lt;code&gt;HEAD&lt;&#x2F;code&gt; and &lt;code&gt;master&lt;&#x2F;code&gt; point to A0
separately.  We can get to the latter state by:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git checkout $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This will use the last commit above.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 (HEAD, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;git checkout&lt;&#x2F;code&gt; roughly means &amp;quot;move &lt;code&gt;HEAD&lt;&#x2F;code&gt; to the given place, and change the
filesystem to match &lt;code&gt;HEAD&lt;&#x2F;code&gt;.&amp;quot;
Notice that when you did the checkout, you got a scary message about being in
&#x27;detached HEAD&#x27; state.  Many people are afraid of this cryptic message, but you now
know what it means.  We can easily escape it by typing &lt;code&gt;git checkout master&lt;&#x2F;code&gt;,
which puts us back in our earlier, safer, state.  Do that now:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git checkout master
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;branching&quot;&gt;Branching&lt;a class=&quot;zola-anchor&quot; href=&quot;#branching&quot; aria-label=&quot;Anchor link for: branching&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s add to our file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; &amp;gt;&amp;gt; a.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Add the line &amp;#39;A1&amp;#39;; make sure you have double brackets!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ git commit a.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853] A1
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file changed, 1 insertion(+)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The order means that A0 is the parent of A1.
Notice that &lt;code&gt;master&lt;&#x2F;code&gt; has moved up to the new commit A1, dragging &lt;code&gt;HEAD&lt;&#x2F;code&gt; up with
it.  Had we been in the &#x27;detached HEAD&#x27; mode above when we made our commit,
our graph would look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ git lol
* 0c5a853 (HEAD) A1
* c32f318 (master) A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case, if we committed in the detached &lt;code&gt;HEAD&lt;&#x2F;code&gt; state, we would have
left branch &lt;code&gt;master&lt;&#x2F;code&gt; behind.  Being on a branch means the branch moves with us.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s experiment with branching!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git branch dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git branch
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 (HEAD -&amp;gt; master, dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first command makes a branch, pointed at our current commit, and the second
command shows the branches, putting an &lt;code&gt;*&lt;&#x2F;code&gt; before the branch &lt;code&gt;HEAD&lt;&#x2F;code&gt; is pointing
to.  Notice that in the log, we see that both &lt;code&gt;master&lt;&#x2F;code&gt; and &lt;code&gt;dev&lt;&#x2F;code&gt; point to A1,
and &lt;code&gt;HEAD&lt;&#x2F;code&gt; points to &lt;code&gt;master&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s switch branches:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git checkout dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git branch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; dev
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;master
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 (HEAD -&amp;gt; dev, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;&#x2F;code&gt; is now pointing to branch &lt;code&gt;dev&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s make another commit:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; &amp;gt; b.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git add b.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 4e7b4c1 (HEAD -&amp;gt; dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 (master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Checking &lt;code&gt;git lol&lt;&#x2F;code&gt; shows three commits; the most recent we&#x27;ll call B2.
Notice &lt;code&gt;master&lt;&#x2F;code&gt; is still pointed at A1, while &lt;code&gt;dev&lt;&#x2F;code&gt; (and &lt;code&gt;HEAD&lt;&#x2F;code&gt;) is pointed
at B2.  Let&#x27;s go back to master to see where we are:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git checkout master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that there is only the file &lt;code&gt;a.txt&lt;&#x2F;code&gt;, and the log only shows A1 and A0,
which is what we expect.  When we are
pointing at a commit, we can only get information about its ancestors, not
its descendants.  This is an important enough point that we&#x27;ll put it in
bold: &lt;strong&gt;A commit knows everything about its ancestors, and nothing about
its descendants&lt;&#x2F;strong&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#garbage-collection&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can see the graph with all the branches by&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lola
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 4e7b4c1 (dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A1
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s make an additional commit on &lt;code&gt;master&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; &amp;gt; a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git commit a.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 93f50b6 (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see how &lt;code&gt;master&lt;&#x2F;code&gt; and &lt;code&gt;dev&lt;&#x2F;code&gt; relate:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lola
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 93f50b6 (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 4e7b4c1 (dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our branches have diverged!  The parent of both A2 and B2 is A1, but A2 and B2
don&#x27;t know anything about each other.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;merging&quot;&gt;Merging&lt;a class=&quot;zola-anchor&quot; href=&quot;#merging&quot; aria-label=&quot;Anchor link for: merging&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;How does merging fit into this picture?  Merging two branches makes a commit
that has the tip of each branch as parents.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git merge dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   eb328ca (HEAD -&amp;gt; master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|\
| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 4e7b4c1 (dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B2
* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;93f50b6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A2
|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that &lt;code&gt;dev&lt;&#x2F;code&gt; is still pointing to B2, but &lt;code&gt;master&lt;&#x2F;code&gt; now points to a commit
A3 that has both A2 and B2 as parents.  Now that &lt;code&gt;dev&lt;&#x2F;code&gt; has been merged into
&lt;code&gt;master&lt;&#x2F;code&gt;, &lt;code&gt;master&lt;&#x2F;code&gt; knows all about &lt;code&gt;dev&lt;&#x2F;code&gt; and its history.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s up with &lt;code&gt;dev&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git checkout dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 4e7b4c1 (HEAD -&amp;gt; dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B2
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git merge master
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git lol
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   eb328ca (HEAD -&amp;gt; dev, master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|\
| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 4e7b4c1 B2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;93f50b6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; A2
|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that this merge didn&#x27;t make a new commit, it just moved &lt;code&gt;dev&lt;&#x2F;code&gt; to point
at A3; this is called a &#x27;fast-forward&#x27; merge.  This is another very important
point: &lt;strong&gt;By default, if a merge can be accomplished by moving a branch to an
existing commit that satisfies the merge, it will do this.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can also add the &lt;code&gt;--no-ff&lt;&#x2F;code&gt; flag to a merge, which forces it to not
fast-forward.  Had we done that, the commits would be&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   d85fcb6 (HEAD -&amp;gt; dev) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;B3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|\
| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   eb328ca (master) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| |\
| |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4e7b4c1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; B2
| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 93f50b6 A2
|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;
*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0c5a853 A1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c32f318 A0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes the commit tree more complex, but keeps an explicit record of the
merge.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now you understand, at a commit level, what&#x27;s happening when you branch and
merge.  It might be fruitful to experiment with committing, branching,
merging, detaching &lt;code&gt;HEAD&lt;&#x2F;code&gt;, &lt;code&gt;git reset&lt;&#x2F;code&gt;, and more, checking with &lt;code&gt;git lol&lt;&#x2F;code&gt; and
&lt;code&gt;git lola&lt;&#x2F;code&gt; to see the commit tree.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;a class=&quot;zola-anchor&quot; href=&quot;#footnotes&quot; aria-label=&quot;Anchor link for: footnotes&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;commit-blobs&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Commits are made up of blobs and trees, which are more fundamental, but
we&#x27;ll not go down to that level.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;garbage-collection&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;In fact, a commit that has nothing pointing to it is
considered garbage, and will be cleaned up and deleted by git in about 30 days.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
</feed>
